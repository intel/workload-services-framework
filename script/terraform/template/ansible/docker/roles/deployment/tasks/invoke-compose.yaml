#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: record timing
  shell:
    cmd: |
      echo "workload_itr{{ itr }}_start: \"$(date -Ins)\"" >> {{ wl_logs_dir }}/timing.yaml
    executable: /bin/bash
  delegate_to: localhost

- name: create a workspace folder
  file:
    path: "/tmp/{{ wl_namespace }}-compose"
    state: directory

- name: copy compose-config.yaml
  copy:
    src: "{{ wl_logs_dir }}/compose-config.yaml"
    dest: "/tmp/{{ wl_namespace }}-compose/docker-compose.yaml"

- name: invoke docker compose up
  shell:
    cmd: "docker compose up {{ ('True' in pullalways) | ternary('--pull always','') }} --detach --force-recreate"
    chdir: "/tmp/{{ wl_namespace }}-compose"
  vars:
    compose_config: "{{ lookup('file', wl_logs_dir+'/compose-config.yaml') | from_yaml }}"
    pullalways: "x{% for s in compose_config.services %}{% for r in (skopeo_sut_accessible_registries | default('') | split(',')) %}{{ ((r!='') and compose_config.services[s]['image'].startswith(r)) }}{% endfor %}{% endfor %}x"

- name: waitproc to wait for logs complete
  shell:
    cmd: |
      nohup timeout {{ workload_config.timeout | split(',') | first }}s bash -c 'docker compose exec {{ workload_config.job_filter.split(',')[0].split('=')[-1] }} sh -c "cat {{ workload_config.export_logs }} > /tmp/{{ wl_namespace }}-compose-logs.tar; tar tf /tmp/{{ wl_namespace }}-compose-logs.tar > /dev/null && cat /tmp/{{ wl_namespace }}-compose-logs.tar || tar cf - \$(cat /tmp/{{ wl_namespace }}-compose-logs.tar)" > /tmp/{{ wl_namespace }}-compose/{{ workload_config.job_filter.split(',')[0].split('=')[-1] }}-logs.tar' > /dev/null 2>&1 &
      echo $!
      disown
    executable: /bin/bash
    chdir: "/tmp/{{ wl_namespace }}-compose"
  register: waitproc

- name: invoke the trace procedure
  include_role:
    name: trace
  vars:
    trace_waitproc_pid: "{{ waitproc.stdout }}"
    trace_logs_scripts: ["docker compose logs {{ workload_config.job_filter.split(',')[0].split('=')[-1] }}"]

- name: record timing
  shell:
    cmd: |
      echo "workload_itr{{ itr }}_end: \"$(date -Ins)\"" >> {{ wl_logs_dir }}/timing.yaml
    executable: /bin/bash
  delegate_to: localhost

- name: retrieve additional service logs
  shell:
    cmd: |
      docker compose exec {{ item.split('=')[-1] }} sh -c 'cat {{ workload_config.export_logs }} > /tmp/{{ wl_namespace }}-compose-logs.tar; tar tf /tmp/{{ wl_namespace }}-compose-logs.tar > /dev/null && cat /tmp/{{ wl_namespace }}-compose-logs.tar || tar cf - $(cat /tmp/{{ wl_namespace }}-compose-logs.tar)' > /tmp/{{ wl_namespace }}-compose/{{ item.split('=')[-1] }}-logs.tar
    executable: /bin/bash
    chdir: "/tmp/{{ wl_namespace }}-compose"
  loop: "{{ workload_config.job_filter.split(',')[1:] }}"
  ignore_errors: true

- name: print docker info
  shell: |
    docker version
    docker compose version

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules is defined
  ignore_errors: true

- block:

  - name: print docker logs
    command:
      cmd: "docker compose logs"
      chdir: "/tmp/{{ wl_namespace }}-compose"
    ignore_errors: true

  - name: create the iteration direcctory
    file:
      path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ item.split('=')[-1] }}"
      state: directory
    delegate_to: localhost
    loop: "{{ workload_config.job_filter.split(',') }}"

  - name: copy logs back to the itr directory
    fetch:
      src: "/tmp/{{ wl_namespace }}-compose/{{ item.split('=')[-1] }}-logs.tar"
      dest: "{{ wl_logs_dir }}/itr-{{ itr }}/"
      flat: true
    loop: "{{ workload_config.job_filter.split(',') }}"

  - name: untar the logs
    unarchive:
      src: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ item.split('=')[-1] }}-logs.tar"
      dest: "{{ wl_logs_dir}}/itr-{{ itr }}/{{ item.split('=')[-1] }}"
    delegate_to: localhost
    loop: "{{ workload_config.job_filter.split(',') }}"

  always:

  - name: remove local logs tarfile
    file:
      path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ item.split('=')[-1] }}-logs.tar"
      state: absent
    delegate_to: localhost
    ignore_errors: true
    loop: "{{ workload_config.job_filter.split(',') }}"

- name: remove workspace
  include_role:
    name: cleanup
    tasks_from: cleanup-compose
  when: ((itr |int) < (run_stage_iterations | default(1) | int)) or ('cleanup' not in (stage | default('cleanup')))

