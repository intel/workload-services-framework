#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: record timing
  shell:
    cmd: |
      echo "workload_itr{{ itr }}_start: \"$(date -Ins)\"" >> {{ wl_logs_dir }}/timing.yaml
    executable: /bin/bash
  delegate_to: localhost

- name: invoke docker run
  shell: 
    cmd: "docker run {{ ('True' in pullalways) | ternary('--pull always','') }} $(compgen -e | sed -nE '/_(proxy|PROXY)$/{s/^/-e /;p}') {{ workload_config.docker_options }} --rm -d {{ workload_config.docker_image }}"
    executable: /bin/bash
  register: container
  vars:
    pullalways: "x{% for r in (skopeo_sut_accessible_registries | default('') | split(',')) %}{{ ((r!='') and workload_config.docker_image.startswith(r)) }}{% endfor %}x"

- name: save container_id for cleanup
  copy:
    content: "{{ container | to_yaml }}"
    dest: "{{ wl_logs_dir }}/tocleanup.yaml"
  delegate_to: localhost

- name: waitproc to wait for logs complete
  shell:
    cmd: |
      nohup timeout {{ workload_config.timeout | split(',') | first }}s bash -c 'docker exec {{ container.stdout_lines | first }} sh -c "cat {{ workload_config.export_logs }} > /tmp/{{ wl_namespace }}-docker-logs.tar; tar tf /tmp/{{ wl_namespace }}-docker-logs.tar > /dev/null && cat /tmp/{{ wl_namespace }}-docker-logs.tar || tar cf - \$(cat /tmp/{{ wl_namespace }}-docker-logs.tar)" > /tmp/{{ wl_namespace }}-docker-logs.tar' > /dev/null 2>&1 &
      echo $!
      disown
    executable: /bin/bash
  register: waitproc

- name: invoke the trace procedure
  include_role:
    name: trace
  vars:
    trace_waitproc_pid: "{{ waitproc.stdout }}"
    trace_logs_scripts: ["docker logs {{ container.stdout_lines | first }}"]

- name: record timing
  shell:
    cmd: |
      echo "workload_itr{{ itr }}_end: \"$(date -Ins)\"" >> {{ wl_logs_dir }}/timing.yaml
    executable: /bin/bash
  delegate_to: localhost

- name: print docker info
  command: "docker version"

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules is defined

- block:

  - name: print docker logs
    command: "docker logs {{ container.stdout_lines | first }}"
    ignore_errors: true

  - name: stop the docker container
    command: "docker rm -v -f {{ container.stdout_lines | first }}"
    when: ((itr |int) < (run_stage_iterations | default(1) | int)) or ('cleanup' not in (stage | default('cleanup')))

  - name: create the iteration direcctory
    file:
      path: "{{ wl_logs_dir }}/itr-{{ itr }}/worker-0"
      state: directory
    delegate_to: localhost

  - name: copy logs back to the itr directory
    fetch:
      src: "/tmp/{{ wl_namespace }}-docker-logs.tar"
      dest: "{{ wl_logs_dir }}/itr-{{ itr }}/"
      flat: yes

  - name: untar the logs
    unarchive:
      src: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-docker-logs.tar"
      dest: "{{ wl_logs_dir}}/itr-{{ itr }}/worker-0"
    delegate_to: localhost
    ignore_errors: true

  always:

  - name: remove remote logs
    file:
      path: "/tmp/{{ wl_namespace }}-docker-logs.tar"
      state: absent
    ignore_errors: true

  - name: remove local logs tarfile
    file:
      path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-docker-logs.tar"
      state: absent
    delegate_to: localhost
    ignore_errors: true

