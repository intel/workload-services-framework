#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- set_fact:
    local_daemon_url: "localhost:{{ (local_daemon_port|int) + (play_hosts|ansible.utils.index_of('eq',inventory_hostname,wantlist=true)|first) }}"

- block:

    - name: setup port forwarding
      shell:
        cmd: |
          nohup ssh -4 -p {{ ansible_port | default(22) }} {{ ansible_user }}@{{ ansible_host }} -fNL {{ local_daemon_url }}:/var/run/docker.sock {% if ansible_private_key_file is defined %}-i {{ ansible_private_key_file }}{% endif %} >> /tmp/{{ wl_namespace }}-ssh.logs 2>&1 &
          disown
        executable: /bin/bash
      delegate_to: localhost

    - name: inspect local images
      shell:
        cmd: |
          {% if ('/' not in workload_config.registry) or ('/' not in item.key) %}
            docker image inspect {{ item.key }}
          {% else %}
            false
          {% endif %}
        executable: /bin/bash
      register: inspect_l
      loop: "{{ wl_docker_images | dict2items | rejectattr('key','match',(sut_accessible_registries|default(skopeo_sut_accessible_registries,true)|split(',')|reject('==','')|default(['NO-REGISTRY'],true)|map('regex_replace','^(.*)$','^\\1.*$')|join('|'))) }}"
      loop_control:
        label: "{{ item.key }}"
      delegate_to: localhost
      ignore_errors: true
      no_log: true

    - name: inspect remote images
      command: "docker image inspect {{ item.item.key }}"
      environment:
        ALL_PROXY: ""
        all_proxy: ""
      register: inspect_r
      loop: "{{ inspect_l.results }}"
      loop_control:
        label: "{{ item.item.key }}"
      ignore_errors: true
      no_log: true

    - name: Inspect registry images
      command: "skopeo inspect {{ skopeo_inspect_options }} --tls-verify=false docker://{{ item.item.key }}"
      environment:
        ALL_PROXY: ""
        all_proxy: ""
      register: inspect_lreg
      when: item.rc != 0
      loop: "{{ inspect_l.results }}"
      loop_control:
        label: "{{ item.item.key }}"
      delegate_to: localhost
      ignore_errors: true
      no_log: true

    - name: Skopeo copy images
      shell:
        cmd: |
          nohup bash -c '
            {% for inspect in inspect_l.results %}
              {% if ((inspect.rc==0) and (inspect.stdout | from_json | map(attribute='Config') | map(attribute='Labels') | map(attribute='BUILD_ID') | map('default','NB',true) | difference(inspect_r.results[loop.index0].stdout | default('[{"Config":{"Labels":{}}}]',true) | from_json | map(attribute='Config') | map(attribute='Labels') | map(attribute='BUILD_ID') | map('default','NC',true)) | length > 0)) or ((inspect.rc!=0) and (('BUILD_ID' | extract('Labels' | extract(inspect_lreg.results[loop.index0].stdout | default('{"Labels":{}}',true) | from_json)) | default('NB',true)) not in (inspect_r.results[loop.index0].stdout | default('[{"Config":{"Labels":{}}}]',true) | from_json | map(attribute='Config') | map(attribute='Labels') | map(attribute='BUILD_ID') | map('default','NC',true)))) %}
                (
                  for i in { 1..{{ skopeo_copy_retries }} }; do
                    skopeo copy {{ skopeo_copy_options }} --src-tls-verify=false --dest-daemon-host=http://{{ local_daemon_url }} {% if inspect.rc==0 %}docker-daemon:{{ inspect.item.key }}{% else %}docker://{{ inspect.item.key }}{% endif %} docker-daemon:{{ inspect.item.key }} && exit 0
                    sleep {{ skopeo_copy_delay }}
                  done
                  echo "Error: Retry Timeout"
                ) &
              {% endif %}
            {% endfor %}
            wait
          ' >> >(stdbuf -oL tr '\r' '\n' >> /tmp/{{ wl_namespace }}-{{ inventory_hostname }}-skopeo-progress.logs) 2>&1 &
          echo $!
          disown
        executable: /bin/bash
      environment:
        ALL_PROXY: ""
        all_proxy: ""
      register: copy_process
      delegate_to: localhost

    - name: Streaming skopeo copy progress
      shell:
        cmd: |
          echo "nice -n 19 tail -f --pid={{ copy_process.stdout }} /tmp/{{ wl_namespace }}-{{ inventory_hostname }}-skopeo-progress.logs | stdbuf -oL sed 's|^|{{ inventory_hostname }}: |'" > /tmp/streaming-console
        executable: /bin/bash
      delegate_to: localhost
      no_log: true

    - name: Wait until skopeo copy completes
      shell:
        cmd: |
          nice -n 19 tail -f --pid={{ copy_process.stdout }} /dev/null
          [ -e /tmp/{{ wl_namespace }}-{{ inventory_hostname }}-skopeo-progress.logs ] || exit 3
          ! grep -q -E 'FATA\[[0-9]*\]|level=fatal|Error:' /tmp/{{ wl_namespace }}-{{ inventory_hostname }}-skopeo-progress.logs
        executable: /bin/bash
      delegate_to: localhost
      no_log: true

    - name: wait for docker images to be ready
      shell:
        cmd: |
          timeout {{ skopeo_wait_ready }} bash -c '
            {% for image in (inspect_l.results | map(attribute='item') | map(attribute='key')) %}
              while ! docker inspect {{ image }} > /dev/null 2>&1; do sleep 1s; done &
            {% endfor %}
            wait
          '
        executable: /bin/bash
      ignore_errors: true

  always:

    - name: cancel port forwarding
      shell:
        cmd: |
          ssh -4 -p {{ ansible_port | default(22) }} {{ ansible_user }}@{{ ansible_host }} {% if ansible_private_key_file is defined %}-i {{ ansible_private_key_file }}{% endif %} -O cancel -L {{ local_daemon_url }}:/var/run/docker.sock > /dev/null 2>&1
        executable: /bin/bash
      delegate_to: localhost
      ignore_errors: true

  become: false
