#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- block:

    - name: install containerd
      include_role:
        name: containerd
      when: (docker_install_containerd | bool)
      
    - name: get docker status
      shell:
        cmd: "docker ps {{ compose | default(false) | bool | ternary('&& docker compose version','') }}"
        executable: /bin/bash
      register: docker_rc
      ignore_errors: yes

    - block:

      - name: check os
        shell:
          cmd: ". /etc/os-release; echo $ID"
          executable: /bin/bash
        register: os

      - name: install docker
        include_tasks:
          file: "install-{{ (os.stdout in ['ubuntu', 'debian']) | ternary('debian', 'centos') }}.yaml"

      when: (docker_rc is failed) or (docker_reset | bool)

    - name: Configure proxy
      include_tasks:
        file: proxy.yaml

    - name: Create directories
      file:
        path: "{{ item }}"
        state: directory
      loop: "{{ [docker_daemon_json | dirname] | union((docker_data_root!='') | ternary([docker_data_root],[])) }}"

    - name: "Fetch {{ docker_daemon_json }}"
      shell:
        cmd: |
          cat {{ docker_daemon_json }} 2> /dev/null || echo "{}"
        executable: /bin/bash
      register: daemonjson

    - name: "Configure {{ docker_daemon_json }}"
      copy:
        content: "{{ daemonjson_new }}"
        dest: "{{ docker_daemon_json }}"
      when: (daemonjson.stdout | to_nice_json) != daemonjson_new
      register: conf_modified
      vars:
        daemonjson_delta: "{{ {'exec-opts': ['native.cgroupdriver=systemd']} | \
          combine((docker_data_root!='')|ternary({'data-root':docker_data_root},{})) | \
          combine((docker_registry_mirrors_list|length>0)|ternary({'registry-mirrors':docker_registry_mirrors_list},{})) | \
          combine((docker_insecure_registries_list|length>0)|ternary({'insecure-registries':docker_insecure_registries_list},{})) | \
          combine((docker_bridge_ip!='')|ternary({'bip':docker_bridge_ip},{})) }}"
        daemonjson_new: "{{ daemonjson.stdout | from_json | combine(daemonjson_delta, recursive=True, list_merge='append_rp') | to_nice_json }}"

    - name: Abort if restarting docker is required
      fail:
        msg: |
          Failed to restart docker on the dev host. 
          Please manually sudo systemctl restart docker, and then rerun the test.
      when:
      - ansible_host in my_ip_list.split(',')
      - (conf_modified is changed) or (docker_rc is failed) or (docker_reset | bool) or (proxy_modified is changed)

    - name: Ensure group "docker" exists
      group:
        name: docker
        state: present

    - name: Restart docker
      systemd:
        name: docker
        state: restarted
        enabled: yes
        daemon_reload: yes
      when: (conf_modified is changed) or (docker_rc is failed) or (docker_reset | bool) or (proxy_modified is changed)
      register: systemctlrc
      until: systemctlrc is success
      retries: 10
      delay: 10
      no_log: true

    - name: Fix /var/run/docker.sock Permission
      file:
        path: /var/run/docker.sock
        group: docker

    - name: add user to the docker group
      user:
        name: "{{ ansible_user }}"
        groups: [ docker ]
        append: yes

    - name: reset ssh connection
      meta: reset_connection

  when: not (docker_skip_configuration|bool)
  vars:
    docker_registry_mirrors_list: "{% if docker_registry_mirrors | type_debug == 'list' %}{{ docker_registry_mirrors }}{% else %}{{ docker_registry_mirrors | default('',true) | split(',') | reject('==','') }}{% endif %}"
    docker_insecure_registries_list: "{% if docker_insecure_registries | type_debug == 'list' %}{{ docker_insecure_registries }}{% else %}{{ docker_insecure_registries | default('',true) | split(',') | reject('==','') }}{% endif %}"

