#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: Comment out incompatible /etc/hosts entries
  include_tasks:
    file: hosts.yaml
  when: ((ansible_connection|default('ssh')) == 'ssh')

- name: Turn off incompatible services
  include_tasks:
    file: service.yaml
  when: ((ansible_connection|default('ssh')) == 'ssh')

- name: remove legacy repos
  include_role:
    name: legacy-repo
  when: ((ansible_connection|default('ssh')) == 'ssh')

- name: set no_proxy
  include_role:
    name: no-proxy
  when:
  - ((ansible_connection|default('ssh')) == 'ssh')
  - (groups.cluster_hosts+groups.off_cluster_hosts)|map('extract',hostvars,['private_ip'])|select('defined')|unique|length>1

- name: set timezone and datetime
  include_role:
    name: datetime
  when:
  - sut_update_datetime | bool
  - ((ansible_connection|default('ssh')) == 'ssh')

- name: Create a local sav folder
  file:
    path: "{{ startup_restore_path }}"
    state: directory
    recurse: yes
  failed_when: false

- name: set reboot false
  set_fact:
    startup_reboot_required: false

- name: apply label kernel-args
  include_role:
    name: "{{ label_roles | select('in',label_name|lower) | first }}"
    tasks_from: kernel-args
  when:
    - label_name.startswith('HAS-SETUP-')
    - label_roles | select('in',label_name|lower) | length > 0
    - ((ansible_connection|default('ssh')) == 'ssh')
  loop: "{{ k8s_node_labels }}"
  loop_control:
    loop_var: label_name
  vars:
    label_roles: "{{ lookup('pipe','ls -f '+playbook_dir+'/roles/*/tasks/kernel-args.yaml') | split('\n') | map('regex_replace','^.*/roles/([a-z-]*)/.*$','\\1') | sort(reverse=true) }}"

- name: apply kernel args
  include_tasks:
    file: kernel-args.yaml
  when:
  - not ansible_host in my_ip_list.split(',')
  - sut_update_kernel_args | bool
  - ((ansible_connection|default('ssh')) == 'ssh')

- name: apply BIOS settings
  include_role:
    name: bios
    tasks_from: startup
  when:
  - sut_reboot | bool
  - sut_update_bios | bool
  - not ansible_host in my_ip_list.split(',')
  - (playbook_dir + '/roles/bios') is exists
  - inventory_hostname in groups.workload_hosts
  - ((ansible_connection|default('ssh')) == 'ssh')

- name: reboot
  include_tasks:
    file: reboot.yaml
  when:
  - sut_reboot | bool
  - startup_reboot_required
  - ((ansible_connection|default('ssh')) == 'ssh')

- name: auto-provision labels
  include_role:
    name: "{{ label_roles | select('in',label_name|lower) | first }}"
    tasks_from: install
  when:
    - label_name.startswith('HAS-SETUP-')
    - sut_reboot | bool
    - label_roles | select('in',label_name|lower) | length > 0
  loop: "{{ k8s_node_labels }}"
  loop_control:
    loop_var: label_name
  vars:
    label_roles: "{{ lookup('pipe','ls -f '+playbook_dir+'/roles/*/tasks/install.yaml') | split('\n') | map('regex_replace','^.*/roles/([a-z-]*)/.*$','\\1') | sort(reverse=true) }}"

- name: process kernel modules
  include_tasks:
    file: kernel-modules.yaml
  when:
  - sut_update_kernel_modules|bool
  - ((ansible_connection|default('ssh')) == 'ssh')

- name: process sysctls
  include_tasks:
    file: sysctl.yaml
  when: sut_update_sysctls|bool

- name: process sysfs
  include_tasks:
    file: sysfs.yaml
  when: sut_update_sysfs|bool

- name: install burncpu package
  include_role:
    name: burn-cpu
    tasks_from: install
  when: burn_cpu_seconds is defined

- name: apply MSR settings
  include_role:
    name: msr
  when:
  - sut_update_msr | bool

- name: apply tpmi settings
  include_role:
    name: tpmi
    tasks_from: startup
  when:
  - sut_update_tpmi | bool
  - ((ansible_connection|default('ssh')) == 'ssh')
  - (playbook_dir + '/roles/tpmi') is exists
  - inventory_hostname in groups.workload_hosts
