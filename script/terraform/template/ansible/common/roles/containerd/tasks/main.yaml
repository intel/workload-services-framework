#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

  - name: check if containerd is installed
    command: containerd --version
    register: containerd
    ignore_errors: yes
    become: yes

  - name: Detect OS
    shell:
      cmd: ". /etc/os-release; echo $ID"
      executable: /bin/bash
    register: os
    when: ((containerd.rc != 0) or containerd_reset)

  - name: install containerd
    include_tasks:
      file: "install-{{ (os.stdout == 'rhel' or os.stdout == 'anolis') | ternary('centos', os.stdout) }}.yaml"
    when: ((containerd.rc != 0) or containerd_reset)

  - name: check containerd configuration
    command: containerd config dump
    register: config
    ignore_errors: yes

  - name: check if containerd must be reconfigured
    set_fact:
      reconfigure: "{{ not (('SystemdCgroup = true' in config.stdout) and (containerd_pause_registry in config.stdout) and (containerd_data_root in config.stdout)) or containerd_reset }}"

  - name: "Ensure {{ containerd_config_toml | dirname }} exists"
    file:
      path: "{{ containerd_config_toml | dirname }}"
      state: directory
    when: reconfigure
    become: yes

  - name: configure containerd
    shell: "containerd config default > {{ containerd_config_toml }}"
    when: reconfigure
    become: yes

  - name: Configure SystemdCgroup=true
    lineinfile:
      path: "{{ containerd_config_toml }}"
      regexp: '^(\s*)SystemdCgroup\s*='
      line: '\1SystemdCgroup = true'
      backrefs: yes
    when: reconfigure
    become: yes

  - name: Configure sandbox_image
    lineinfile:
      path: "{{ containerd_config_toml }}"
      regexp: '^(\s*)sandbox_image\s*=\s*".*(/.*)"'
      line: '\1sandbox_image = "{{ containerd_pause_registry }}\2"'
      backrefs: yes
    when: reconfigure
    become: yes

  - name: Configure insecure registry cert
    shell: |
      mkdir -p "/etc/containerd/certs.d/{{ item }}"
      printf "server = \"http://{{ item }}\"\n[host.\"http://{{ item }}\"]\n  capabilities = [\"pull\", \"resolve\"]\n[plugin.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{ item }}\".tls]\n  insecure_skip_verify = true\n" > "/etc/containerd/certs.d/{{ item }}/hosts.toml"
    loop: "{{ containerd_insecure_registry.split(',') }}"
    when: containerd_insecure_registry != "" and reconfigure
    become: yes

  - name: Configure insecure registry
    lineinfile:
      path: "{{ containerd_config_toml }}"
      regexp: '^(\s*)config_path\s*='
      line: '\1config_path = "/etc/containerd/certs.d"'
      backrefs: yes
    when: reconfigure
    become: yes

  - name: "Ensure {{ containerd_data_root }} exists"
    file:
      path: "{{ containerd_data_root }}"
      state: directory
    when: reconfigure
    become: yes

  - name: configure containerd root
    lineinfile:
      path: "{{ containerd_config_toml }}"
      regexp: '^(\s*)root\s*='
      line: '\1root = "{{ containerd_data_root }}"'
      backrefs: yes
    when: reconfigure
    become: yes

  - name: check proxy value
    shell: "echo :$http_proxy$https_proxy$no_proxy:"
    register: proxy

  - name: check proxy configuration
    stat:
      path: "{{ containerd_proxy_conf }}"
    register: proxy_conf

  - name: configure proxy
    shell: |
      mkdir -p {{ containerd_proxy_conf | dirname }}
      printf "[Service]\nEnvironment=\"HTTP_PROXY=$http_proxy\" \"HTTPS_PROXY=$https_proxy\" \"NO_PROXY=$no_proxy{{ ((k8s_registry_ip is defined) and (k8s_enable_registry | default(true))) | ternary(',' + (k8s_registry_ip | default('')),'') }}\"\n" > {{ containerd_proxy_conf }}
    when: proxy != "::" and not proxy_conf.stat.exists
    become: yes
    
  - name: Abort if containerd must be restarted
    fail:
      msg: "Failed to restart containerd. Please manually sudo systemctl restart containerd"
    when:
      - ansible_host in my_ip_list.split(",")
      - reconfigure or containerd.rc != 0 or (proxy != "::" and not proxy_conf.stat.exists)

  - name: restart containerd
    include_tasks:
      file: 'restart.yaml'
    when: reconfigure or containerd.rc != 0 or (proxy != "::" and not proxy_conf.stat.exists)

