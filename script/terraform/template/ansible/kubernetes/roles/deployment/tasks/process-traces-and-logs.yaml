#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: get benchmark pods
  shell:
    cmd: |
      kubectl get --namespace={{ wl_namespace }} pod --selector={{ workload_config.job_filter | split(',') | first | split(':') | first }} '-o=jsonpath={.items[*].metadata.name}' | tr ' ' '\n'
    executable: /bin/bash
  register: pods

- name: waitproc to wait for logs complete
  shell:
    cmd: |
      nohup bash -c "timeout {{ timeout }}s bash -c \"{% if (k8s_detect_pod_failure|bool) %}kubectl --namespace={{ wl_namespace }} wait pod --all --for=condition=Failed --timeout={{ timeout | int+300 }}s & kubectl --namespace={{ wl_namespace }} wait pod --all --for=condition=Error --timeout={{ timeout | int+300 }}s & {% endif %}({% for pod in pods.stdout_lines %}kubectl exec {{ k8s_exec_options }} --namespace={{ wl_namespace }} {{ pod }} -c {{ pod_container }} -- sh -c 'cat {{ workload_config.export_logs }} > /tmp/{{ wl_namespace }}-{{ pod }}-{{ itr }}-logs.tar; tar tf /tmp/{{ wl_namespace }}-{{ pod }}-{{ itr }}-logs.tar || tar cf /tmp/{{ wl_namespace }}-{{ pod }}-{{ itr }}-logs.tar \\\$(cat /tmp/{{ wl_namespace }}-{{ pod }}-{{ itr }}-logs.tar)'; {% endfor %})& wait -n\"; echo \$? > /tmp/{{ wl_namespace }}-{{ inventory_hostname }}-waitproc.status" > /dev/null 2>&1 &
      echo $!
      disown
    executable: /bin/bash
  register: waitproc
  vars:
    pods_str: "{{ pods.stdout_lines | join(' ') }}"
    pod_container_tmp: "{{ workload_config.job_filter.split(',')[0].split('=')[1] | default(workload_config.job_filter.split(',')[0].split('=')[0]) }}"
    pod_container: "{{ pod_container_tmp.split(':')[1] | default(pod_container_tmp.split(':')[0]) }}"
    timeout: "{{ workload_config.timeout.split(',') | first }}"

- name: get trace pods
  shell:
    cmd: |
      kubectl get --namespace={{ wl_namespace }} pod "-o=jsonpath={.items[?(@.spec.nodeName in ['{{ item }}'])].metadata.uid}"
    executable: /bin/bash
  loop: "{{ groups.trace_hosts | intersect(groups.cluster_hosts) }}"
  when: wl_trace_modules | default('') | split(',') | reject('==','') | reject('match','.*:host.*') | length > 0
  register: trace_pods
  ignore_errors: true

- set_fact:
    WORKLOAD_METADATA: "{{ item.stdout | split(' ') | map('regex_replace','^','pod:') }}"
  when:
  - wl_trace_modules | default('') | split(',') | reject('==','') | reject('match','.*:host.*') | length > 0
  - item.rc == 0
  - item.stdout | split(' ') | length > 0
  delegate_to: "{{ item.item }}"
  delegate_facts: true
  loop: "{{ trace_pods.results }}"

- name: invoke the trace procedure
  include_role:
    name: trace
  vars:
    trace_waitproc_pid: "{{ waitproc.stdout }}"
    pod_container_tmp: "{{ workload_config.job_filter.split(',')[0].split('=')[1] | default(workload_config.job_filter.split(',')[0].split('=')[0]) }}"
    pod_container: "{{ pod_container_tmp.split(':')[1] | default(pod_container_tmp.split(':')[0]) }}"
    trace_logs_scripts: "{{ pods.stdout_lines | map('regex_replace', '^(.*)$', 'kubectl logs --ignore-errors --prefix=false --tail=-1 --namespace=' + wl_namespace + ' \\1 -c ' + pod_container) }}"
    trace_logs_host: "{{ inventory_hostname }}"
    trace_status_file: "/tmp/{{ wl_namespace }}-{{ inventory_hostname }}-waitproc.status"
    
- name: retrieve execution logs
  shell: 
    cmd: |
      kubectl exec {{ k8s_exec_options }} --namespace={{ wl_namespace }} {{ item }} -c {{ pod_container }} -- sh -c 'cat /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar' > /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar && tar tf /tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar > /dev/null
    executable: /bin/bash
  register: status
  until: status.rc == 0
  retries: 5
  delay: 5
  with_items: "{{ pods.stdout_lines }}"
  ignore_errors: yes
  vars:
    pod_container_tmp: "{{ workload_config.job_filter.split(',')[0].split('=')[1] | default(workload_config.job_filter.split(',')[0].split('=')[0]) }}"
    pod_container: "{{ pod_container_tmp.split(':')[1] | default(pod_container_tmp.split(':')[0]) }}"

- name: get service pods
  shell: "kubectl get --namespace={{ wl_namespace }} pod --selector={{ item | split(':') | first }} '-o=jsonpath={.items[*].metadata.name}' | tr ' ' '\n'"
  register: services
  loop: "{{ workload_config.job_filter.split(',')[1:] }}"

- name: wait for service logs ready
  shell:
    cmd: |
      for pod in {{ item.stdout_lines | difference(pods.stdout_lines) | join(' ') }}; do
        ( 
          kubectl exec {{ k8s_exec_options }} --namespace={{ wl_namespace }} $pod -c {{ (item.item.split('=')[1] | default(item.item.split('=')[0])).split(':')[1] | default((item.item.split('=')[1] | default(item.item.split('=')[0])).split(':')[0]) }} -- sh -c "cat {{ workload_config.export_logs }} > /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar; tar tf /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar || tar cf /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar \$(cat /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar)"
          for retries in 1 2 3 4 5; do
            kubectl exec {{ k8s_exec_options }} --namespace={{ wl_namespace }} $pod -c {{ (item.item.split('=')[1] | default(item.item.split('=')[0])).split(':')[1] | default((item.item.split('=')[1] | default(item.item.split('=')[0])).split(':')[0]) }} -- sh -c "cat /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar" > /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar && tar tf /tmp/{{ wl_namespace }}-$pod-{{ itr }}-logs.tar && break
            sleep 5s
          done
        ) > /dev/null 2>&1 &
      done
      wait
    executable: /bin/bash
  when: item.stdout_lines | difference(pods.stdout_lines) | length > 0
  loop: "{{ services.results }}"

- name: create the iteration directory
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ item }}"
    state: directory
  with_items: "{{ pods.stdout_lines | union(services | json_query('results[*].stdout_lines') | flatten) | unique }}"
  delegate_to: localhost
  ignore_errors: yes

- name: copy logs to local
  fetch:
    src: "/tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    dest: "{{ wl_logs_dir }}/itr-{{ itr }}/"
    flat: yes
  with_items: "{{ pods.stdout_lines | union(services | json_query('results[*].stdout_lines') | flatten) | unique }}"
  ignore_errors: yes

- name: untar the logs
  unarchive:
    src: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    dest: "{{ wl_logs_dir}}/itr-{{ itr }}/{{ item }}"
  with_items: "{{ pods.stdout_lines | union(services | json_query('results[*].stdout_lines') | flatten) | unique }}"
  delegate_to: localhost
  ignore_errors: yes

- name: remove tmp files
  file: 
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    state: absent
  with_items: "{{ pods.stdout_lines | union(services | json_query('results[*].stdout_lines') | flatten) | unique }}"
  delegate_to: localhost
  ignore_errors: yes

- name: remove tmp logs files
  file: 
    path: "/tmp/{{ wl_namespace }}-{{ item }}-{{ itr }}-logs.tar"
    state: absent
  with_items: "{{ pods.stdout_lines | union(services | json_query('results[*].stdout_lines') | flatten) | unique }}"
  ignore_errors: yes

- block:

  - name: get all pods
    command: "kubectl get pod --namespace {{ wl_namespace }} --ignore-not-found -o name"
    register: all_pods

  - name: get all pod logs
    command: kubectl logs --namespace {{ wl_namespace }} --all-containers=true --prefix=true {{ item }}
    when: k8s_save_logs | bool
    loop: "{{ all_pods.stdout_lines }}"
    register: all_pod_logs
    no_log: true

  - name: save pod logs
    copy:
      dest: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ item.item | replace('pod/','') }}.logs"
      content: "{{ item.stdout }}"
    loop: "{{ all_pod_logs.results }}"
    delegate_to: localhost
    no_log: true

  when: k8s_save_logs | bool
  ignore_errors: true
