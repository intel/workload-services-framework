#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: get trace mode
  set_fact:
    trace_mode: "{{ 'trace_mode' | extract(lookup('file', wl_logs_dir + '/workload-config.yaml') | from_yaml) | split(',') }}"

- name: workload execution procedure
  block:

    - name: waitproc to wait for logs complete
      shell:
        cmd: |
          nohup timeout {{ workload_config.timeout.split(',') | first }}s bash -c 'docker exec {{ off_cluster_container_id }} sh -c "cat {{ workload_config.export_logs }} > /tmp/{{ wl_namespace }}-docker-logs.tar; tar tf /tmp/{{ wl_namespace }}-docker-logs.tar > /dev/null && cat /tmp/{{ wl_namespace }}-docker-logs.tar || tar cf - \$(cat /tmp/{{ wl_namespace }}-docker-logs.tar)" > /tmp/{{ wl_namespace }}-docker-logs.tar' > /dev/null 2>&1 &
          echo $!
          disown
        executable: /bin/bash
      register: waitproc
      delegate_to: "{{ off_cluster_host }}"
      vars:
        workload_config: "{{ lookup('file', wl_logs_dir+'/workload-config.yaml') | from_yaml }}"

    - name: start the trace procedure
      include_role:
        name: trace
      vars:
        trace_waitproc_pid: "{{ waitproc.stdout }}"
        trace_logs_scripts: ["docker logs {{ off_cluster_container_id }}"]
        trace_logs_host: "{{ off_cluster_host }}"

- name: print docker info
  command: "docker version"
  delegate_to: "{{ off_cluster_host }}"

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules is defined
  ignore_errors: yes

- name: print docker logs
  command: "docker logs {{ off_cluster_container_id }}"
  ignore_errors: true
  delegate_to: "{{ off_cluster_host }}"

- name: create the iteration direcctory
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ off_cluster_container_id }}"
    state: directory
  delegate_to: localhost

- name: copy logs back to the itr directory
  fetch:
    src: "/tmp/{{ wl_namespace }}-docker-logs.tar"
    dest: "{{ wl_logs_dir }}/itr-{{ itr }}/"
    flat: yes
  delegate_to: "{{ off_cluster_host }}"

- name: untar the logs
  unarchive:
    src: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-docker-logs.tar"
    dest: "{{ wl_logs_dir}}/itr-{{ itr }}/{{ off_cluster_container_id }}"
  delegate_to: localhost
  ignore_errors: true

- name: remove remote logs
  file:
    path: "/tmp/{{ wl_namespace }}-docker-logs.tar"
    state: absent
  delegate_to: "{{ off_cluster_host }}"

- name: remove local logs tarfile
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/{{ wl_namespace }}-docker-logs.tar"
    state: absent
  delegate_to: localhost
