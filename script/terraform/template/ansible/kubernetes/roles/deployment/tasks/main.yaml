#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- block:

    - name: create name space
      command: "kubectl create namespace {{ wl_namespace }}"

  rescue:

    - name: delete namespace
      include_role:
        name: cleanup
        tasks_from: delete-namespace

    - name: create name space
      command: "kubectl create namespace {{ wl_namespace }}"

- name: Create ImagePullSecret
  include_role:
    name: docker-auth
  vars:
    namespace: "{{ wl_namespace }}"

- name: Customize deployment yaml for CNI
  include_role:
    name: "cni-{{ k8s_cni }}"
    tasks_from: customize-deployment.yaml
  when:
  - ((role_path + '/../cni-' + k8s_cni + '/tasks/customize-deployment.yaml') is exists)
  - sut_sudo | default(true) | bool

- name: create deployment
  shell:
    cmd: |
      kubectl create --namespace {{ wl_namespace }} secret generic workload-config --from-env-file=<(
        {% if k8s_config_timezone | bool %}
          echo "TZ=$(timedatectl show --va -p Timezone 2> /dev/null || echo $TZ)"
        {% endif %}
        {% for k in workload_secrets.keys() %}
          echo "{{ k }}=${{ k }}"
        {% endfor %}
      )
      kubectl create --namespace {{ wl_namespace }} -f /tmp/{{ wl_namespace }}-k8s-script.yaml
    executable: /bin/bash
  environment: "{{ workload_secrets }}"
  vars:
    workload_secrets: "{{ lookup('file',wl_logs_dir+'/.workload-secret.yaml') | from_yaml | default({},true) }}"

- block:
  
    - name: wait for scheduling
      shell: "timeout {{ timeout[1] | default(timeout[0]) }} bash -c 'until kubectl --namespace={{ wl_namespace }} wait pod --all --for=condition=Ready --field-selector=status.phase!=Succeeded --timeout={{ k8s_schedule_wait_timeout }}; do if kubectl --namespace={{ wl_namespace }} get pod -o json | grep -q Unschedulable; then exit 1; fi; done; exit 0'"
      vars:
        timeout: "{{ 'timeout' | extract(lookup('file', wl_logs_dir+'/workload-config.yaml')|from_yaml) | split(',') }}"

  rescue:

    - name: debugging
      include_role: 
        name: debug

    - name: abort
      fail:
        msg: "abort due to scheduling failure"

- include_role:
    name: timing
    tasks_from: start-iteration

- name: workload-execution
  include_tasks:
    file: process-traces-and-logs.yaml

- include_role:
    name: timing
    tasks_from: stop-iteration

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules | default('') | split(',') | reject('==','') | length > 0
  ignore_errors: yes

- name: print debug info 
  include_role:
    name: debug

- name: delete namespace
  include_role:
    name: cleanup
    tasks_from: delete-namespace
  when: ((itr |int) < (run_stage_iterations | default(1) | int)) or ('cleanup' not in (stage | default('cleanup')))

