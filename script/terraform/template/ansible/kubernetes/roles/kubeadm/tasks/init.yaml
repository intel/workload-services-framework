#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: Ensure the data root exists
  file:
    path: "{{ k8s_data_root }}"
    state: directory
  become: true

- block:

    - name: Create the kubeadm config file
      copy:
        content: "{{ kubeadm_options.values() | map('to_nice_yaml') | join('---\n') | regex_replace('(bindPort: |maxPods: |imageGCLowThresholdPercent: |imageGCHighThresholdPercent: ).([0-9]*).','\\1\\2') }}"
        dest: "/tmp/{{ wl_namespace }}-kubeadm-config.yaml"
      vars:
        apiserver_addr: "{{ k8s_apiserver_ip | default(private_ip,true) }}"
        apiserver_ip: "{% if (apiserver_addr|ipaddr) %}{{ apiserver_addr }}{% else %}{{ query('dig',apiserver_addr)|first }}{% endif %}"
        kubeadm_options_default:
          ClusterConfiguration:
            apiVersion: kubeadm.k8s.io/v1beta3
            kind: ClusterConfiguration
            networking:
              serviceSubnet: "{{ k8s_service_cidr }}"
              podSubnet: "{{ k8s_pod_cidr }}"
            kubernetesVersion: "v{{ k8s_version }}"
            controlPlaneEndpoint: "{{ apiserver_ip }}:{{ k8s_apiserver_port | default(6443,true) | int }}"
          KubeletConfiguration:
            apiVersion: kubelet.config.k8s.io/v1beta1
            kind: KubeletConfiguration
            cgroupDriver: "{{ k8s_cgroup_driver }}"
            maxPods: "{{ k8s_max_pods | int }}"
            imageGCLowThresholdPercent: "{{ k8s_image_gc_low_threshold_percent | int }}"
            imageGCHighThresholdPercent: "{{ k8s_image_gc_high_threshold_percent | int }}"
            allowedUnsafeSysctls: "{{ k8s_allowed_unsafe_sysctls | split(',') | reject('==','') }}"
            runtimeRequestTimeout: "{{ k8s_runtime_request_timeout }}"
          InitConfiguration:
            apiVersion: kubeadm.k8s.io/v1beta3
            kind: InitConfiguration
            localAPIEndpoint:
              advertiseAddress: "{{ apiserver_ip }}"
              bindPort: "{{ k8s_apiserver_port | default(6443,true) | int }}"
            nodeRegistration:
              name: "{{ inventory_hostname }}"
              criSocket: "{{ k8s_containerd_socket }}"
              kubeletExtraArgs:
                "node-ip": "{% if (private_ip|ipaddr) %}{{ private_ip }}{% else %}{{ query('dig',private_ip)|first }}{% endif %}"
                "root-dir": "{{ k8s_data_root }}"
        kubeadm_untaint_options:
          InitConfiguration:
            nodeRegistration:
              taints: []
        kubeadm_should_untaint: "{{ groups.cluster_hosts | difference(groups.controller) | map('extract', hostvars, ['ansible_host']) | intersect(groups.controller | map('extract', hostvars, ['ansible_host'])) | length > 0 }}"
        kubeadm_options: "{{ kubeadm_options_default | combine(k8s_kubeadm_options, recursive=True) | combine(kubeadm_should_untaint | ternary(kubeadm_untaint_options,{}), recursive=True) }}"
    
    - name: kubeadm init
      command: "kubeadm init --config /tmp/{{ wl_namespace }}-kubeadm-config.yaml"

  always:

    - name: Remove the kubeadm config file
      file:
        path: "/tmp/{{ wl_namespace }}-kubeadm-config.yaml"
        state: absent

  become: true

- name: find out the home directory
  shell:
    cmd: "echo $HOME"
    executable: /bin/bash
  register: home

- name: create .kube
  become_user: "{{ ansible_user }}"
  become: yes
  file:
    path: "{{ home.stdout }}/.kube"
    state: directory
    mode: "0700"

- name: copy admin.conf
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ home.stdout }}/.kube/config"
    remote_src: yes
    owner: "{{ ansible_user }}"
    mode: "0600"
  become: yes

- name: Wait for all control-plane pods become created
  shell: "kubectl get po --namespace=kube-system --selector tier=control-plane --output=jsonpath='{.items[*].metadata.name}'"
  register: pods
  until: item in pods.stdout
  retries: 10
  delay: 30
  with_items:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- block:

    - name: Wait for control-plane pods become ready
      shell: "timeout {{ k8s_node_ready_wait }} kubectl wait --namespace=kube-system --for=condition=Ready pods --selector tier=control-plane"

  rescue:

    - include_role:
        name: debug
      vars:
        debug_options: "-A"

    - fail:
        msg: "Failed to setup control plane"

