#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- name: Install calicoctl as a Kubernetes pod
  shell: "kubectl create -f {{ k8s_calicoctl_rep }}"

- name: Add calicoctl alias
  lineinfile:
    path=/home/{{ ansible_user }}/.bashrc
    line='alias calicoctl="kubectl exec -i -n kube-system calicoctl -- /calicoctl"'
    state=present
    insertafter=EOF

- name: Download calico.yaml to local
  delegate_to: localhost
  get_url:
    url: "{{ k8s_calico_vxlan_repo if ( k8s_calico_encapsulation | lower == 'vxlan' ) else k8s_calico_ipinip_repo }}"
    dest: "{{ inventory_dir }}/calico.yaml"
    mode: +rx
  register: getrc
  until: getrc is success
  retries: 10
  delay: 5

- name: Set fact for custom cidr
  set_fact:
    insert_cidr_lines: "- name: CALICO_IPV4POOL_CIDR\n  value: {{ k8s_pod_cidr }}"

- name: Replace calico.yaml with custom cidr
  delegate_to: localhost
  blockinfile:
    path: "{{ inventory_dir }}/calico.yaml"
    marker: "# {mark} ANSIBLE MANAGED BLOCK cidr"
    state: present
    insertbefore: '# - name: CALICO_IPV4POOL_CIDR'
    block: "{{ insert_cidr_lines | indent(width=12, first=True) }}"

- name: Replace calico.yaml CrossSubnet with Always if vxlan enabled
  delegate_to: localhost
  replace:
    path: "{{ inventory_dir }}/calico.yaml"
    regexp: '(\s+)value: "CrossSubnet"(\s+.*)?$'
    replace: '\1value: "Always"\2'
  when: (k8s_calico_encapsulation | lower) == 'vxlan'

- name: Copy replaced calico.yaml to remote
  ansible.builtin.copy:
    src: "{{ inventory_dir }}/calico.yaml"
    dest: /tmp/{{ wl_namespace }}-calico.yaml

- name: Install calico.yaml
  shell: "kubectl create -f /tmp/{{ wl_namespace }}-calico.yaml"

- name: Cleanup remote calico.yaml
  file:
    path: "/tmp/{{ wl_namespace }}-calico.yaml"
    state: absent
  ignore_errors: true

- name: Wait for calico ready
  shell: |
    kubectl wait --namespace=kube-system pod --for=condition=Ready -l k8s-app=calico-node --timeout=300s
  register: wait_ready
  retries: 50
  delay: 3
  until: wait_ready.rc == 0
