<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>System Utilization</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">

  <style>
    body {
      padding-top: 20px;
      padding-bottom: 20px;
    }

    .header {
      padding-bottom: 20px;
      padding-right: 15px;
      padding-left: 15px;
      border-bottom: 1px solid #e5e5e5;
    }

    .header h3 {
      margin-top: 0;
      margin-bottom: 0;
      line-height: 40px;
    }

    .row {
      margin-left: 0 !important;
    }

    .wrapper {
      display: flex;
    }

    .handle {
      height: 70px;
      width: 5px;
      background-color: DodgerBlue;
    }

    .content {
      flex-grow: 1;
    }

    .tab {
      overflow: hidden;
      border: 1px solid #ccc;
      background-color: #f1f1f1;
    }

    /* Style the buttons that are used to open the tab content */
    .tab button {
      background-color: inherit;
      float: left;
      border: 1px solid lightgray;
      outline: none;
      cursor: pointer;
      padding: 8px 10px;
      transition: 0.3s;
      font-weight: 600;
      font-size: 0.8rem;
    }

    /* Change background color of buttons on hover */
    .tab button:hover {
      background-color: #ddd;
    }

    /* Create an active/current tablink class */
    .tab button.active {
      background-color: #00aeef;
      font-size: bold !important;
      color: white !important;
    }

    /* Style the tab content */
    .tabcontent {
      display: none;
      padding: 6px 12px;
      border: 1px solid #ccc;
      border-top: none;
    }

    @media print {
      .printable {
        zoom: 50%;
      }
    }
  </style>

  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.54.1/apexcharts.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm"
    crossorigin="anonymous"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.54.1/apexcharts.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.21/lodash.min.js"></script>
</head>

<body>

  <div class="card shadow py-2 px-2">
    <div class="tab">
      <button class="tablinks active" onclick="openTabContent(event, 'AverageCPU')">Average CPU Usage Trend(across
        all
        cores)</button>
      <button class="tablinks" onclick="openTabContent(event, 'CPUFrequency')">CPU Frequency Trend</button>
      <button class="tablinks" onclick="openTabContent(event, 'CPUUtil')">CPU Utilization Trend</button>
      <button class="tablinks" onclick="openTabContent(event, 'MemoryUtil')">Memory Usage Trend</button>
      <button class="tablinks" onclick="openTabContent(event, 'DiskUtil')">Disk Usage Trend</button>
      <button class="tablinks" onclick="openTabContent(event, 'NetworkUtil')">Network Usage Trend</button>
    </div>
    <div id="AverageCPU" class="tabcontent active" style="display: block">
      <div class="card-header">
        <span style="font-weight: 500;">Average CPU Usage Trend(across all cores)</span>
        <button class="btn btn-success btn-sm" style="float:right;" onClick="window.print()"><i class="fa fa-print"
            aria-hidden="true"></i>Save as PDF</button>
        <div class="row d-flex"></div>
      </div>
      <div class="card-body overflow-auto row col-12">
        <div class="col-11" id="average-cpu-id" style="height: 400px;"></div>

      </div>
    </div>
    <div id="CPUUtil" class="tabcontent px-0 py-2">
      <div class="card-header">
        <span style="font-weight: 500;">CPU Utilization Trend</span>
        <button class="btn btn-success btn-sm" style="float:right;" onClick="window.print()"><i class="fa fa-print"
            aria-hidden="true"></i>Save as PDF</button>
        <div class="row d-flex"></div>
      </div>
      <div class="row" id="sortable">
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-user-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-system-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-idle-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-wait-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-softirq-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-interrupt-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-nice-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="cpu-steal-id" style="height: 400px;"></div>
        </div>
      </div>
    </div>
    <div id="CPUFrequency" class="tabcontent px-0 py-2">
      <div class="card-header">
        <span style="font-weight: 500;">CPU Frequency Trend</span>
        <button class="btn btn-success btn-sm" style="float:right;" onClick="window.print()"><i class="fa fa-print"
            aria-hidden="true"></i>Save as PDF</button>
        <div class="row d-flex"></div>
      </div>
      <div class="card-body overflow-auto row col-12">
        <div class="col-11 printable" id="cpu-freq-id" style="height: 400px;"></div>
      </div>
    </div>
    <div id="MemoryUtil" class="tabcontent px-0 py-2">
      <div class="card-header">
        <span style="font-weight: 500;">Memory Usage Trend</span>
        <button class="btn btn-success btn-sm" style="float:right;" onClick="window.print()"><i class="fa fa-print"
            aria-hidden="true"></i>Save as PDF</button>
        <div class="row d-flex"></div>
      </div>
      <div class="row" id="sortable_mem">
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="memory-gb-id" style="height: 400px;"></div>
        </div>
        <div class="card-body overflow-auto row col-12 wrapper">
          <div class="handle col-1"></div>
          <div class="col-11 printable" id="memory-percentage-id" style="height: 400px;"></div>
        </div>
      </div>

    </div>
    <div id="DiskUtil" class="tabcontent px-0 py-2">
      <div class="card-header">
        <span style="font-weight: 500;">Disk Usage Trend</span>
        <button class="btn btn-success btn-sm" style="float:right;" onClick="window.print()"><i class="fa fa-print"
            aria-hidden="true"></i>Save as PDF</button>
        <div class="row d-flex"></div>
      </div>
      <div class="card-body overflow-auto row col-12">
        <div class="col-11 printable" id="disk-id" style="height: 400px;"></div>
      </div>
    </div>
    <div id="NetworkUtil" class="tabcontent px-0 py-2">
      <div class="card-header">
        <span style="font-weight: 500;">Network Usage Trend</span>
        <button class="btn btn-success btn-sm" style="float:right;" onClick="window.print()"><i class="fa fa-print"
            aria-hidden="true"></i>Save as PDF</button>
        <div class="row d-flex"></div>
      </div>
      <div class="card-body overflow-auto row col-12">
        <div class="col-11 printable" id="network-id" style="height: 400px;"></div>
      </div>
    </div>
  </div>
  <script>
    {{ collectd_data }}
  </script>

  <script type="text/javascript">
    function hide_chart(id) {
      const el = document.getElementById(id);
      el.parentNode.style.display = 'none';
    }

    function create_line_chart(id, options) {
      const el = document.getElementById(id);
      const chart = new ApexCharts(el, _.merge(options, {
        chart: {
          id: id,
          type: 'line',
          height: '350px',
          redrawOnParentResize: true,
          redrawOnWindowResize: true,
          group: 'synchronized',
          zoom: {
            enabled: true
          },
          toolbar: {
            show: true,
            offsetX: 0,
            offsetY: 0,
            tools: {
              download: true,
              selection: true,
              zoom: true,
              zoomin: true,
              zoomout: true,
              pan: true,
              reset: true | '<img src="/static/icons/reset.png" width="20">',
              customIcons: []
            },
            export: {
              csv: {
                filename: undefined,
                columnDelimiter: ',',
                headerCategory: 'category',
                headerValue: 'value',
                dateFormatter(timestamp) {
                  return new Date(timestamp).toDateString()
                }
              },
              svg: {
                filename: undefined,
              },
              png: {
                filename: undefined,
              }
            },
            autoSelected: 'zoom'
          },
        },
        stroke: {
          width: 1.5,
          opacity: 1
        },
        xaxis: {
          type: 'datetime',
          labels: {
            datetimeUTC: true,
          },
          min: min_time,
          max: max_time,
        },
        yaxis: {
          labels: {
            minWidth: 20,
          },
        },
        tooltip: {
          shared: false,
          x: {
            format: 'MMM dd HH:mm:ss',
          },
        },
        legend: {
          show: true,
          position: 'bottom',
          horizontalAlign: 'center',
          onItemClick: {
            toggleDataSeries: true
          },
          onItemHover: {
            highlightDataSeries: true
          },
        },
      }));
      chart.render();
    }

    document.addEventListener('DOMContentLoaded', function () {

      function create_average_cpu_chart(id, title) {
        try {
          create_line_chart(id, {
            title: {
              text: title,
            },
            yaxis: {
              min: 0,
              max: 100,
              decimalsInFloat: 0,
            },
            series: [{
              name: 'usr',
              data: cpu_user,
            }, {
              name: 'nice',
              data: cpu_nice,
            }, {
              name: 'sys',
              data: cpu_system,
            }, {
              name: 'iowait',
              data: cpu_wait,
            }, {
              name: 'steal',
              data: cpu_steal,
            }, {
              name: 'irq',
              data: cpu_interrupt,
            }, {
              name: 'soft',
              data: cpu_softirq,
            }, {
              name: 'idle',
              data: cpu_idle,
            }],
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
      }

      function create_cpu_freq_chart(id, title) {
        try {
          var series = [{
            name: 'cpu-all',
            data: cpu_freq.map((x) => [x[0], x[1] / 1000000000]),
          }];
          for (let k in cpu_x_freq) {
            series.push({
              name: 'cpu-' + k,
              data: cpu_x_freq[k].map((x) => [x[0], x[1] / 1000000000]),
              hidden: true,
            });
          }
          create_line_chart(id, {
            chart: {
              animations: {
                enabled: false,
              },
            },
            title: {
              text: title,
            },
            yaxis: {
              decimalsInFloat: 3,
            },
            series: series,
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
      }

      function create_memory_gb_chart(id, title) {
        try {
          create_line_chart(id, {
            title: {
              text: title,
            },
            yaxis: {
              min: 0,
              decimalsInFloat: 0,
            },
            series: [{
              name: 'used',
              data: memory_used.map((x) => [x[0], x[1] / 1024 / 1024 / 1024]),
            },
            {
              name: 'free',
              data: memory_free.map((x) => [x[0], x[1] / 1024 / 1024 / 1024]),
            },
            {
              name: 'cached',
              data: memory_cached.map((x) => [x[0], x[1] / 1024 / 1024 / 1024]),
            },
            {
              name: 'buffered',
              data: memory_buffered.map((x) => [x[0], x[1] / 1024 / 1024 / 1024]),
            },
            {
              name: 'slab_recl',
              data: memory_slab_recl.map((x) => [x[0], x[1] / 1024 / 1024 / 1024]),
            }, {
              name: 'slab_unrecl',
              data: memory_slab_unrecl.map((x) => [x[0], x[1] / 1024 / 1024 / 1024]),
            }],
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
      }

      function create_memory_percentage_chart(id, title) {
        try {

          sum_avg = 0;
          for (i in memory_used) {
            sum = 0;
            if (memory_used[i]) {
              sum = sum + memory_used[i][1]
            }
            if (memory_free[i]) {
              sum = sum + memory_free[i][1]
            }
            if (memory_cached[i]) {
              sum = sum + memory_cached[i][1]
            }
            if (memory_buffered[i]) {
              sum = sum + memory_buffered[i][1]
            }
            if (memory_slab_recl[i]) {
              sum = sum + memory_slab_recl[i][1]
            }
            if (memory_slab_unrecl[i]) {
              sum = sum + memory_slab_unrecl[i][1]
            }
            sum_avg = (sum_avg + sum) / 2;
          }

          create_line_chart(id, {
            title: {
              text: title,
            },
            yaxis: {
              min: 0,
              max: 100,
              decimalsInFloat: 0,
            },
            series: [{
              name: 'used',
              data: memory_used.map((x) => [x[0], x[1] / sum_avg * 100]),
            },
            {
              name: 'free',
              data: memory_free.map((x) => [x[0], x[1] / sum_avg * 100]),
            },
            {
              name: 'cached',
              data: memory_cached.map((x) => [x[0], x[1] / sum_avg * 100]),
            },
            {
              name: 'buffered',
              data: memory_buffered.map((x) => [x[0], x[1] / sum_avg * 100]),
            },
            {
              name: 'slab_recl',
              data: memory_slab_recl.map((x) => [x[0], x[1] / sum_avg * 100]),
            }, {
              name: 'slab_unrecl',
              data: memory_slab_unrecl.map((x) => [x[0], x[1] / sum_avg * 100]),
            }],
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
      }

      function create_disk_chart(id, title) {
        try {
          var series = [];
          for (let k in disk_ops_read) {
            series.push({
              name: "read-" + (k.replace('dev_','')),
              data: disk_ops_read[k],
            });
          }
          for (let k in disk_ops_write) {
            series.push({
              name: "write-" + (k.replace('dev_','')),
              data: disk_ops_write[k],
            });
          }
          create_line_chart(id, {
            title: {
              text: title,
            },
            legend: {
              position: 'bottom',
              horizontalAlign: ',center',
            },
            yaxis: {
              decimalsInFloat: 2,
            },
            series: series,
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
      }

      function create_network_chart(id, title) {
        try {
          var series = [];
          for (let k in if_packages_rx) {
            series.push({
              name: "rx-" + k,
              data: if_packages_rx[k],
            });
          }
          for (let k in if_packages_tx) {
            series.push({
              name: "tx-" + k,
              data: if_packages_tx[k],
            });
          }
          create_line_chart(id, {
            title: {
              text: title,
            },
            yaxis: {
              decimalsInFloat: 2,
            },
            series: series,
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
      }
      function create_per_cpu_chart(id, title, data, sk) {
        try {
          var series = [];
          if (sk < 0) {
            var v1 = 0;
            for (let k in data) {
              for (let v in data[k]) {
                if (data[k][v][1] > v1) {
                  v1 = data[k][v][1];
                  sk = k;
                }
              }
            }
          }
          for (let k in data) {
            series.push({
              name: "cpu-" + k,
              data: data[k],
              hidden: (k != sk),
            });
          }
          create_line_chart(id, {
            chart: {
              animations: {
                enabled: false,
              },
            },
            title: {
              text: title,
            },
            yaxis: {
              min: 0,
              max: 100,
              decimalsInFloat: 0,
            },
            series: series,
          });
        } catch (e) {
          hide_chart(id);
          console.log(e);
        }
        return sk;
      }

      create_average_cpu_chart('average-cpu-id', 'Average CPU Usage (%)');
      create_cpu_freq_chart('cpu-freq-id', 'CPU Frequency (GHz)');
      create_network_chart('network-id', 'Network Usage Trend (packets)');
      create_disk_chart('disk-id', 'Disk Usage Trend');
      create_memory_gb_chart('memory-gb-id', 'Memory Usage Trend (GB)');
      create_memory_percentage_chart('memory-percentage-id', 'Memory Usage Trend (%)');

      var sk = create_per_cpu_chart('cpu-user-id', 'CPU (%user)', cpu_x_user, -1);
      create_per_cpu_chart('cpu-nice-id', 'CPU (%nice)', cpu_x_nice, sk);
      create_per_cpu_chart('cpu-system-id', 'CPU (%system)', cpu_x_system, sk);
      create_per_cpu_chart('cpu-idle-id', 'CPU (%idle)', cpu_x_idle, sk);
      create_per_cpu_chart('cpu-interrupt-id', 'CPU (%interrupt)', cpu_x_interrupt, sk);
      create_per_cpu_chart('cpu-softirq-id', 'CPU (%softirq)', cpu_x_softirq, sk);
      create_per_cpu_chart('cpu-steal-id', 'CPU (%steal)', cpu_x_steal, sk);
      create_per_cpu_chart('cpu-wait-id', 'CPU (%iowait)', cpu_x_wait, sk);

      function createSortable(div_id) {
        Sortable.create(document.getElementById(div_id), {
          group: {
            name: 'shared',
            pull: 'clone' // To clone: set pull to 'clone'
          },
          ghostClass: 'blue-background-class',
          animation: 150
        });
      }
      createSortable('sortable_mem');
      createSortable('sortable');
    });
  </script>

  <script type="text/javascript">
    function openTabContent(evt, tabContentName) {
      // Declare all variables
      var i, tabcontent, tablinks;

      // Get all elements with class="tabcontent" and hide them
      tabcontent = document.getElementsByClassName("tabcontent");
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }

      // Get all elements with class="tablinks" and remove the class "active"
      tablinks = document.getElementsByClassName("tablinks");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }

      // Show the current tab, and add an "active" class to the button that opened the tab
      document.getElementById(tabContentName).style.display = "block";
      evt.currentTarget.className += " active";
    }
  </script>
</body>

</html>
