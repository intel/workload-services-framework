#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#

- block:

  - name: Check sep and emon directories
    shell:
      cmd: ls -1 {{ emon_bin_path }}/*/sep_vars.sh
      executable: /bin/bash
    register: emon_st
    ignore_errors: true

  - block:

    - name: Detect OS
      shell:
        cmd: . /etc/os-release; echo $ID; echo $VERSION_ID
        executable: /bin/bash
      register: os
  
    - set_fact:
        emon_gcc_options: ''

    - name: Install prerequisites and emon
      include_tasks:
        file: "install-{{ ((os.stdout_lines | first) in ['debian','ubuntu']) | ternary('debian','rhel') }}.yaml"

    - name: "Create an {{ emon_group }} group"
      group:
        name: "{{ emon_group }}"
        state: present
        system: true
  
    - name: "Add user to the {{ emon_group }} group"
      user:
        name: "{{ ansible_user }}"
        append: true
        groups: 
          - "{{ emon_group }}"

    - name: reset ssh connection
      meta: reset_connection
  
    - name: "Remove {{ emon_bin_path }}"
      file:
        path: "{{ emon_bin_path }}"
        state: absent
  
    - name: "Create {{ emon_bin_path }}"
      file:
        path: "{{ emon_bin_path }}"
        state: directory
  
    - name: "Remove {{ emon_src_path }}"
      file:
        path: "{{ emon_src_path }}"
        state: absent
    
    - name: "Create {{ emon_src_path }}"
      file:
        path: "{{ emon_src_path }}"
        state: directory
    
    - name: Get CPU vendor_id
      shell:
        cmd: "sed -n '/^vendor_id/{s/.*: //;p;q}' /proc/cpuinfo"
        executable: /bin/bash
      register: vendor_id
  
    - name: Download emon
      get_url:
        url: "{{ emon_sep_url[vendor_id.stdout] }}"
        dest: "/tmp/{{ emon_sep_package[vendor_id.stdout] }}"
        use_proxy: false
      delegate_to: localhost
      run_once: true
      become: false
      when:
      - emon_sep_url is defined
      - ('/opt/project/script/terraform/data/'+emon_sep_package[vendor_id.stdout]) is not exists
      - ('/tmp/'+emon_sep_package[vendor_id.stdout]) is not exists

    - name: Unpackage sep
      unarchive:
        src: "{{ (('/opt/project/script/terraform/data/'+emon_sep_package[vendor_id.stdout]) is exists) | ternary('/opt/project/script/terraform/data/','/tmp/')+emon_sep_package[vendor_id.stdout] }}"
        dest: "{{ emon_src_path }}"
        extra_opts: --strip-components=1
      when: (emon_st is failed) or (emon_reset | bool)

    - name: Install emon
      shell:
        cmd: |
          . $(ls -1 ./*-installer.sh | head -n1) -u -C {{ emon_bin_path }} --accept-license -ni -i -g {{ emon_group }} --install-boot-script {{ emon_gcc_options | default('--c-compiler $(which gcc)',true) }}
        executable: /bin/bash
        chdir: "{{ emon_src_path }}"

    - name: Remove any installation files
      file:
        path: "{{ emon_src_path }}"
        state: absent
  
    when: (emon_st is failed) or (emon_reset | bool)
    become: true

  delegate_to: "{{ trace_node.1 }}"
  when: (hostvars[trace_node.1].ansible_connection | default('ssh')) not in ['local']

