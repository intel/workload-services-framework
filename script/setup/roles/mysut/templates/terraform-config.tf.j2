variable "wl_name" {
  default = ""
}

variable "wl_namespace" {
  default = ""
}

variable "wl_registry_map" {
  default = ""
}

variable "intel_publisher_sut_machine_type" {
  default = "static"
}

variable "intel_publisher_sut_metadata" {
  default = ""
}

{% for p in ['worker','client','controller'] %}
variable "{{ p }}_profile" {
  default = {
    vm_count = {{ mysut_item[0] | extract(cluster_hosts.keys() | select('match',p+'-.*') | slice(mysut_item[2])) | default([""],true) | length }}
    hosts = {
{% if mysut_item[0] | extract(cluster_hosts.keys() | select('match',p+'-.*') | slice(mysut_item[2])) | default([]) | length == 0 %}
      "{{ p }}-0": {
        # Note: Uncomment and specify your user name
        # "user_name": "<user>",
        "public_ip": "127.0.0.1",
        "private_ip": "127.0.0.1",
        "ssh_port": 22,
      },
{% else %}
{% for h in mysut_item[0] | extract(cluster_hosts.keys() | select('match',p+'-.*') | slice(mysut_item[2])) %}
      "{{ h | regex_replace('[-].*','-'+(loop.index0|string)) }}": {
        # Note: Uncomment and specify your user name
        "user_name": "{{ cluster_hosts[h].ansible_user }}",
        "public_ip": "{{ cluster_hosts[h].ansible_host }}",
        "private_ip": "{{ cluster_hosts[h].private_ip }}",
        "ssh_port": {{ cluster_hosts[h].ansible_port }},
        # Note: Support PDU for power measurement. Leave pdu_password empty.
        # "pdu_port": "0",
        # "pdu_group": "",
        # "pdu_ip": "127.0.1.1",
        # "pdu_user": "",
        # "pdu_password": "",
        # Note: Support BMC for power cycle SUT. Leave bmc_password empty.
        # "bmc_ip": "127.0.0.1",
        # "bmc_port": 623,
        # "bmc_user": "<user>",
        # "bmc_password": ""
        # Note: Support Windows WINRM. Leave the winrm_password empty.
        # "winrm_user": "<user>"
        # "winrm_password": ""
        # Specify passwords in script/csp/.static/config.json, support both global password or password by host ip
        # {
        #   "winrm_password": "",
        #   "bmc_password": "",
        #   "pdu_password": "",
        #   "hosts": {
        #     "host_ip": {
        #       "pdu_password": "",
        #       "bmc_password": "",
        #       "winrm_password": ""
        #     }
        #   }
        # }
      },
{% endfor %}
{% endif %}
    }
  }
}

{% endfor %}
output "instances" {
  sensitive = true
  value = merge({
{% for p in ['worker','client','controller'] %}
{% if loop.index0 > 0 %}
  }, {
{% endif %}
    for i in range(var.{{ p }}_profile.vm_count) :
      "{{ p }}-${i}" => merge(var.{{ p }}_profile.hosts[var.{{ p }}_profile.hosts["{{ p }}-0"].public_ip=="127.0.0.1"?"{{ p }}-0":"{{ p }}-${i}"], var.{{ p }}_profile.hosts["{{ p }}-0"].public_ip=="127.0.0.1"?{
        ansible_connection = "local"
      }:{})
{% endfor %}
  })
}

output "options" {
  value = {
    wl_name : var.wl_name,
    wl_registry_map : var.wl_registry_map,
    wl_namespace : var.wl_namespace,
    intel_publisher_sut_machine_type: var.intel_publisher_sut_machine_type,
    intel_publisher_sut_metadata: var.intel_publisher_sut_metadata,

    # Enable k8s registry only in the DDCW use case. See doc/user-guide/preparing-infrastructure/setup-wsf.md
    k8s_enable_registry: false,
  }
}
