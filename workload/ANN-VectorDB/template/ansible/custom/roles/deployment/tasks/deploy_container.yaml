#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
- include_role:
    name: timing
    tasks_from: start-iteration

- name: Set ANN Parameters
  set_fact:
    algorithm: "{{ wl_tunables['ALGORITHM'] }}"
    dataset: "{{ wl_tunables['DATASET'] }}"
    batch: "{{ wl_tunables['BATCH'] }}"
    cpu_limit: "{{ wl_tunables['CPU_LIMIT'] }}"
    mem_limit: "{{ wl_tunables['MEM_LIMIT'] }}"
    milvus_m: "{{ wl_tunables['MILVUS_M'] }}"
    milvus_query_args: "{{ wl_tunables['MILVUS_QUERY_ARGS'] }}"
    faiss_name: "{{ wl_tunables['FAISS_NAME'] }}"
    faiss_args: "{{ wl_tunables['FAISS_ARGS'] }}"
    faiss_query_args: "{{ wl_tunables['FAISS_QUERY_ARGS'] }}"
    faiss_query_args2: "{{ wl_tunables['FAISS_QUERY_ARGS2'] }}"
    redisearch_arg_group: "{{ wl_tunables['REDISEARCH_ARG_GROUP'] }}"
    redisearch_query_args: "{{ wl_tunables['REDISEARCH_QUERY_ARGS'] }}"
    hnswlib_arg_group: "{{ wl_tunables['HNSWLIB_ARG_GROUP'] }}"
    hnswlib_query_args: "{{ wl_tunables['HNSWLIB_QUERY_ARGS'] }}"

- name: Install Template of Entrypoint
  template:
    src: "entrypoint.sh.j2"
    dest: "{{ WORKSPACE }}/entrypoint.sh"
    mode: "0755"

- name: Copy config files
  ansible.builtin.copy:
    src: "config/"
    dest: "{{ WORKSPACE }}/config/"
    mode: '0755'

- name: Create the Logs Directory
  file:
    path: "{{ WORKSPACE }}/itr-{{ itr }}/benchmark"
    state: directory
    recurse: yes

- name: Create trace log file
  file:
    path: "{{ WORKSPACE }}/itr-{{ itr }}/entrypoint.log"
    state: touch
    mode: "0666"

- name: waitproc to wait for entrypoint complete
  shell:
    cmd: |
      cd {{ ANN_HOME }}
      source venv/bin/activate
      cd {{ WORKSPACE }}
      nohup bash -c '(./entrypoint.sh) | tee {{ WORKSPACE }}/itr-{{ itr }}/entrypoint.log' > /dev/null 2>&1 &      
      echo $!
      disown
    executable: /bin/bash
  register: waitproc

- name: invoke the trace procedure
  include_role:
    name: trace
  vars:
    trace_waitproc_pid: "{{ waitproc.stdout }}"
    trace_logs_scripts: ["cat {{ WORKSPACE }}/itr-{{ itr }}/entrypoint.log"]

- include_role:
    name: timing
    tasks_from: stop-iteration

- name: collect trace data
  include_role:
    name: trace
    tasks_from: collect
  when: wl_trace_modules | default('') | split(',') | reject('==','') | length > 0

- name: Archive Logs
  archive:
    path: "{{ WORKSPACE }}/itr-{{ itr }}/"
    dest: "{{ WORKSPACE }}/itr-{{ itr }}.tar.gz"

- name: Fetch Logs to Localhost
  fetch:
    src: "{{ WORKSPACE }}/itr-{{ itr }}.tar.gz"
    dest: "{{ wl_logs_dir }}/"
    flat: yes
    validate_checksum: yes

- name: Create the Logs Directory on Localhost
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}/"
    state: directory
    recurse: yes
    mode: "0777"
  delegate_to: localhost

- name: UnArchive Logs on Localhost
  unarchive:
    src: "{{ wl_logs_dir }}/itr-{{ itr }}.tar.gz"
    dest: "{{ wl_logs_dir }}/itr-{{ itr }}"
    mode: "0777"
  delegate_to: localhost

- name: delete Logs tar file
  file:
    path: "{{ wl_logs_dir }}/itr-{{ itr }}.tar.gz"
    state: absent
  delegate_to: localhost
  ignore_errors: true
  become: true

- name: copy kpi.sh to the itr directory
  copy:
    src: "{{ wl_logs_dir }}/kpi.sh"
    dest: "{{ wl_logs_dir }}/itr-{{ item }}/"
    mode: "a+rx"
  loop: "{{ range(1, run_stage_iterations | default(1) |int+1, 1) | list }}"
  when: ((wl_logs_dir + '/kpi.sh') is exists)
  ignore_errors: true