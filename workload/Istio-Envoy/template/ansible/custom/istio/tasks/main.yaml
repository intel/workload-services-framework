#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
- name: Get host ip of worker-0
  set_fact:
    worker_host_ip: '{{ hostvars["worker-0"]["private_ip"] }}'

- name: Get hostname of worker
  shell: "kubectl get node -owide|grep {{ worker_host_ip }}|awk '{print $1}'"
  register: worker_host_name

- name: Check if istio installed
  shell:
    cmd: "which istioctl"
  ignore_errors: true
  register: istio_installed

- name: Download istio install script
  get_url:
    url: "{{ istio_install_dist_repo }}"
    dest: "/tmp/istio-wl/downloadIstio"
    mode: +rx
  when:
    - istio_installed.rc != 0

- name: Download istio into /tmp directory
  shell:
    cmd: "ISTIO_VERSION={{ istio_version_custom }} /tmp/istio-wl/downloadIstio"
  args:
    chdir: "/tmp/istio-wl"
  when:
    - istio_installed.rc != 0

- name: Create parent install directory if not exist
  become: true
  file:
    path: "{{ istio_install_parent_dir }}"
    state: directory
    mode: "0755"
  when:
    - istio_installed.rc != 0

- name: Copy to parent install directory
  become: true
  copy:
    src: "/tmp/istio-wl/istio-{{ istio_version_custom }}"
    dest: "{{ istio_install_parent_dir }}"
    remote_src: true
  when:
    - istio_installed.rc != 0

- name: Change install directory permissions recursively
  become: true
  file:
    path: "{{ istio_install_dir }}"
    state: directory
    mode: "0755"
    recurse: yes
  when:
    - istio_installed.rc != 0

- name: Link istioctl to /usr/local/bin
  become: true
  file:
    src: "{{ istio_install_dir }}/bin/istioctl"
    dest: "/usr/local/bin/istioctl"
    state: link
  when:
    - istio_installed.rc != 0

- name: Cleanup temp install resources
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/istio-wl/downloadIstio"
    - "/tmp/istio-wl/istio-{{ istio_version_custom }}"
  ignore_errors: true
  when:
    - istio_installed.rc != 0

- name: Istio precheck for pod install
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: "istioctl x precheck"
  register: istio_precheck

- name: Generate isto config - create /tmp/istio-wl/istio-config.yaml
  shell: "echo '' > /tmp/istio-wl/istio-config.yaml"

- name: Generate isto config - write yaml to /tmp/istio-wl/istio-config.yaml
  blockinfile:
    path: /tmp/istio-wl/istio-config.yaml
    block: |
      apiVersion: install.istio.io/v1alpha1
      kind: IstioOperator
      spec:
        components:
          pilot:
            k8s:
              nodeSelector:
                kubernetes.io/hostname: {{ worker_host_name.stdout }}
          ingressGateways:
          - enabled: true
            name: istio-ingressgateway
            k8s:
              nodeSelector:
                kubernetes.io/hostname: {{ worker_host_name.stdout }}

- name: Install istio pods by specified profile name
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: "istioctl install --set profile={{ istio_profile }} -f /tmp/istio-wl/istio-config.yaml -y"
  register: istio_install_res
  when:
    - istio_precheck.rc == 0
    - wl_tunables['CRYPTO_ACC'] != "cryptomb"
    - wl_tunables['CRYPTO_ACC'] != "qathw"

- name: Generate istio cryptomb plugin file
  template:
    src: /opt/workload/template/ansible/custom/pods_template/istio-intel-cryptomb.yaml.j2
    dest: /tmp/istio-wl/istio-intel-cryptomb.yaml

- name: Install istio cryptomb plugin
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: "istioctl install -f /tmp/istio-wl/istio-intel-cryptomb.yaml -y"
  register: istio_install_cryptomb_res
  when:
    - istio_precheck.rc == 0
    - wl_tunables['CRYPTO_ACC'] == "cryptomb"

- name: Create namespace
  shell: kubectl create namespace {{ istio_injection_namespace }} --dry-run=client -o yaml | kubectl apply -f -

- name: Add label to enable sidecar injection
  command: "kubectl label namespace {{ istio_injection_namespace }} istio-injection=enabled --overwrite"



- name: Generate istio QATHW file
  template:
    src: /opt/workload/template/ansible/custom/pods_template/istio-intel-qat-hw.yaml.j2
    dest: /tmp/istio-wl/istio-intel-qat-hw.yaml

- name: Install istio QATHW
  become: true
  become_user: "{{ ansible_user }}"
  shell:
    cmd: "istioctl install -f /tmp/istio-wl/istio-intel-qat-hw.yaml -y"
  register: istio_install_qathw_res
  when:
    - wl_tunables['CRYPTO_ACC'] == "qathw"

