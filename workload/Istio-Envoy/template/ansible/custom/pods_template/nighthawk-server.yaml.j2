#jinja2:lstrip_blocks: True
#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sm-nighthawk-server
  labels:
    app: sm-nighthawk-server
  namespace: istio-workloads-{{ wl_namespace }}
spec:
  replicas: {{ wl_tunables['SERVER_REPLICA_NUM'] }}
  selector:
    matchLabels:
      app: sm-nighthawk-server
  template:
    metadata:
      labels:
        app: sm-nighthawk-server
    spec:
      containers:
        - name: sm-nighthawk-server
          image: {{ remote_registry_url }}/istio-envoy-server{{ 'release' | extract(lookup('file', wl_logs_dir + '/workload-config.yaml') | from_yaml) }}
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 1
              memory: 1Gi
            requests:
              cpu: 1
              memory: 1Gi
          command: [ "/usr/local/bin/nighthawk_test_server", "-c", "/etc/envoy/nighthawk-server-cm.yaml" ]
          ports:
          - containerPort: 10000
            protocol: TCP
          volumeMounts:
          - name: config-volume
            mountPath: /etc/envoy
      volumes:
      - configMap:
          defaultMode: 420
          name: nighthawk
        name: config-volume
      nodeSelector:
          kubernetes.io/hostname: {{ worker_host_name.stdout }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nighthawk
  namespace: istio-workloads-{{ wl_namespace }}
data:
  nighthawk-server-cm.yaml: |
    static_resources:
      listeners:
        # define an origin server on :10000 that always returns "lorem ipsum..."
        - address:
            socket_address:
              address: 0.0.0.0
              port_value: 10000
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    generate_request_id: false
                    codec_type: AUTO
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains:
                            - "*"
                    http_filters:
                      - name: dynamic-delay
                        typed_config:
                          "@type": type.googleapis.com/nighthawk.server.ResponseOptions
                          {% if wl_tunables['SERVER_DELAY_MODE'] == 'static' %}
                          static_delay: {{ wl_tunables['SERVER_DELAY_SECONDS'] }}s
                          {% endif %}
                      - name: test-server # before envoy.router because order matters!
                        typed_config:
                          "@type": type.googleapis.com/nighthawk.server.ResponseOptions
                          response_body_size: {{ wl_tunables['SERVER_RESPONSE_SIZE'] }}
                          v3_response_headers:
                            - { header: { key: "foo", value: "bar" } }
                            - {
                                header: { key: "foo", value: "bar2" },
                                append: true,
                              }
                            - { header: { key: "x-nh", value: "1" } }
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                          dynamic_stats: false
    layered_runtime:
      layers:
      - name: static_layer
        static_layer:
          envoy.reloadable_features.no_extension_lookup_by_name: false
    admin:
      access_log_path: /tmp/envoy.log
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8081



---
apiVersion: v1
kind: Service
metadata:
  name: sm-nighthawk-server
  namespace: istio-workloads-{{ wl_namespace }}
spec:
  selector:
    app: sm-nighthawk-server
  ports:
    - name: {{ wl_tunables['PROTOCOL'] }}
      protocol: TCP
      port: 10000
      targetPort: 10000
