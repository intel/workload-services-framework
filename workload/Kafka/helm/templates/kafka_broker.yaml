#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
{{- $brokerServerList := include "brokerServerList" .Values -}}
{{- $zkServerList := include "zkServerList" .Values -}}
{{- $IMAGESUFFIX := include "IMAGESUFFIX" .Values -}}
{{- $jdkVER := trimPrefix "kafka_" .Values.WORKLOAD }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zookeeper-kafka-server
  labels:
    app: zookeeper-kafka-server
spec:
  replicas: {{ .Values.BROKER_SERVER_NUM }}
  selector:
    matchLabels:
      app: zookeeper-kafka-server
  serviceName: "zookeeper-kafka-server-service"
  podManagementPolicy: Parallel 
  template:
    metadata:
      labels:
        app: zookeeper-kafka-server
        zoo-producer-consumer: anti
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: zookeeper-kafka-server-container
        image: {{ .Values.REGISTRY }}zookeeper-kafka-server-{{  $jdkVER }}{{ $IMAGESUFFIX }}{{ .Values.RELEASE }}
        imagePullPolicy:  {{ include "imagepolicy" .Values }}
        ports:
          - containerPort: 2181
          - containerPort: 9092
          - containerPort: 9093
        securityContext:
          privileged: true
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: K_SERVER_CORE_NEEDED_FACTOR
            value: "{{ .Values.SERVER_CORE_NEEDED_FACTOR }}"
          - name: K_ZK_SERVER
            value: "zookeeper-kafka-server-0.zookeeper-kafka-server-service:2181"
          - name: K_ENCRYPTION
            value: "{{ .Values.ENCRYPTION }}"
          - name: K_NUM_NETWORK_THREADS
            value: "{{ .Values.NUM_NETWORK_THREADS }}"
          - name: K_NUM_REPLICA_FETCHERS
            value: "{{ .Values.NUM_REPLICA_FETCHERS }}"
          - name: K_REPLICA_FETCH_MAX_BYTES
            value: "{{ .Values.REPLICA_FETCH_MAX_BYTES }}"
          - name: K_REPLICA_SOCKET_RECEIVE_BUFFER_BYTES
            value: "{{ .Values.REPLICA_SOCKET_RECEIVE_BUFFER_BYTES }}"
          - name: K_SERVER_NUMACTL_OPTIONS
            value: "{{ .Values.SERVER_NUMACTL_OPTIONS }}"
          - name: K_KAFKA_HEAP_OPTS
            value: "{{ .Values.KAFKA_HEAP_OPTS }}"
          - name: K_ENABLE_MUL_DISK
            value: "{{ .Values.ENABLE_MUL_DISK }}"
          - name: K_MOUNT_DISK_COUNT
            value: "{{ .Values.MOUNT_DISK_COUNT }}"
        {{- if $.Values.ENABLE_MUL_DISK }}
        volumeMounts:
          {{- $disk_num := (int $.Values.MOUNT_DISK_COUNT) -}}
          {{- range $i, $e := until $disk_num }}
          - name: kafka{{ $i }}-mountdisk
            mountPath: /data/kafka{{ $i }}
          {{- end }}
        {{- end }}
{{- if contains "_3n" .Values.TESTCASE }}
        {{- $args := dict "key" "zoo-producer-consumer" "value" "anti" }}
        {{- include "podAntiAffinity" $args }}
        {{- $args2 := dict "nkey" "VM-GROUP" "nvalue" "worker" }}
        {{- include "nodeAffinity" $args2 }}
      {{- if $.Values.ENABLE_MUL_DISK }}
      volumes:
        {{- $disk_num := (int $.Values.MOUNT_DISK_COUNT) -}}
        {{- range $i, $e := until $disk_num }}
        - name: kafka{{ $i }}-mountdisk
          hostPath:
            path: /mnt/disk{{ add $i 1 }}/kafka_data
            type: DirectoryOrCreate
        {{- end }}
      {{- end }}
      {{- if $.Values.ENABLE_MUL_DISK }}
      nodeSelector:
        HAS-SETUP-DISK-SPEC-1: "yes"
      {{- end }}
{{- end }}

---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topic-creator
spec:
  template:
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: kafka-topic-creator-container
        image: {{ .Values.REGISTRY }}kafka-client-{{  $jdkVER }}{{ $IMAGESUFFIX }}{{ .Values.RELEASE }}
        imagePullPolicy:  {{ include "imagepolicy" .Values }}
        command: ["sh", "-c", "run_test.sh && sleep infinity"]
        securityContext:
          privileged: true
        env:
          - name: K_IDENTIFIER
            value: "topic"
          - name: K_SERVER_CORE_NEEDED_FACTOR
            value: "{{ .Values.SERVER_CORE_NEEDED_FACTOR }}"
          - name: K_KAFKA_SERVER
            value: "{{ $brokerServerList }}"
          - name: K_REPLICATION_FACTOR
            value: "{{ .Values.REPLICATION_FACTOR }}"
          - name: K_PARTITIONS
            value: "{{ .Values.PARTITIONS }}"
          - name: K_KAFKA_BENCHMARK_TOPIC
            value: "{{ .Values.KAFKA_BENCHMARK_TOPIC }}"
          - name: K_ENCRYPTION
            value: "{{ .Values.ENCRYPTION }}"
      {{- $args := dict "key" "app" "value" "zookeeper-kafka-server" }}
      {{- include "podAffinity" $args }}
      restartPolicy: Never
  backoffLimit: 2
