# postgresql1411-base

#
# Apache v2 license
# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
ARG OS_VER=24.04
ARG OS_IMAGE=ubuntu

FROM ${OS_IMAGE}:${OS_VER}

# declare POSTGRESQL ingredient
ARG POSTGRESQL_VER="14.11-1.pgdg24.04+1"
ARG POSTGRESQL_IMAGE=postgresql

ARG PG_MAJOR_VER="14"
ARG DEBIAN_FRONTEND=noninteractive
ARG PG_PATH="/var/lib/postgresql"

RUN set -ex; \
	if ! command -v gpg > /dev/null; then \
		apt-get update; \
		apt-get install -y --no-install-recommends \
			gnupg \
			dirmngr \
		; \
		rm -rf /var/lib/apt/lists/*; \
	fi

# explicitly set user/group IDs
RUN set -eux; \
	groupadd -r postgres --gid=999; \
# https://salsa.debian.org/postgresql/postgresql-common/blob/997d842ee744687d99a2b2d95c1083a2615c79e8/debian/postgresql-common.postinst#L32-35
	useradd -r -g postgres --uid=999 --home-dir="$PG_PATH" --shell=/bin/bash postgres; \
# also create the postgres user's home directory with appropriate permissions
# see https://github.com/docker-library/postgres/issues/274
	mkdir -p "$PG_PATH"; \
	chown -R postgres:postgres "$PG_PATH"

# grab gosu for easy step-down from root
# https://github.com/tianon/gosu/releases
ARG GOSU_VER=1.17
ARG GOSU_REPO="https://github.com/tianon/gosu/releases/download/$GOSU_VER"

ARG RECV_VER='B42F6819007F00F88E364FD4036A9C25BF357DD4'
ARG RECV_REPO="keyserver.ubuntu.com"

RUN set -eux; \
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends ca-certificates wget; \
	rm -rf /var/lib/apt/lists/*; \
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "$GOSU_REPO/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "$GOSU_REPO/gosu-$dpkgArch.asc"; \
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --keyserver-options http-proxy=${http_proxy} --batch --keyserver ${RECV_REPO} --recv-keys ${RECV_VER}; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	chmod +x /usr/local/bin/gosu; \
	gosu --version; \
	gosu nobody true

# make the "en_US.UTF-8" locale so postgres will be utf-8 enabled by default
RUN set -eux; \
	if [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \
# if this file exists, we're likely in "debian:xxx-slim", and locales are thus being excluded so we need to remove that exclusion (since we need locales)
		grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \
		sed -ri '/\/usr\/share\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \
		! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \
	fi; \
	apt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; \
	localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8
ENV LANG en_US.utf8

RUN \
    set -eux \
	&& apt-get update \
	&& apt-get install -y --no-install-recommends libnss-wrapper curl xz-utils zstd wget perl gnupg ca-certificates \
	&& rm -rf /var/lib/apt/lists/* \
    && mkdir /docker-entrypoint-initdb.d \ 
    && echo "deb https://apt-archive.postgresql.org/pub/repos/apt/ noble-pgdg-archive main" | tee /etc/apt/sources.list.d/pgdg.list \
    && wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \
    && apt-get update \
    && apt-get install -y --no-install-recommends postgresql-$PG_MAJOR_VER=$POSTGRESQL_VER \
	&& apt-get install -y --no-install-recommends postgresql-common	

#Update Path for Postgres
ENV PATH="$PATH:/usr/lib/postgresql/14/bin"

# make the sample config easier to munge (and "correct by default")
RUN set -eux; \
	dpkg-divert --add --rename --divert "/usr/share/postgresql/postgresql.conf.sample.dpkg" "/usr/share/postgresql/$PG_MAJOR_VER/postgresql.conf.sample"; \
	cp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \
	ln -sv ../postgresql.conf.sample "/usr/share/postgresql/$PG_MAJOR_VER/"; \
	sed -ri "s!^#?(listen_addresses)\s*=\s*\S+.*!\1 = '*'!" /usr/share/postgresql/postgresql.conf.sample; \
	grep -F "listen_addresses = '*'" /usr/share/postgresql/postgresql.conf.sample

RUN mkdir -p /var/run/postgresql && chown -R postgres:postgres /var/run/postgresql && chmod 2777 /var/run/postgresql
ENV PGDATA /var/lib/postgresql/data
# this 777 will be replaced by 700 at runtime (allows semi-arbitrary "--user" values)
RUN mkdir -p "$PGDATA" && chown -R postgres:postgres "$PGDATA" && chmod 777 "$PGDATA"
VOLUME /var/lib/postgresql/data

COPY --chown=postgres:postgres script/docker-entrypoint.sh /usr/local/bin
COPY --chown=postgres:postgres script/entrypoint.sh /
COPY --chown=postgres:postgres opt/postgresql.cnf /usr/share/postgresql/postgresql.conf.sample

ENV DB_TYPE="postgresql"
ENV ENABLE_MOUNT_DIR="true"
ENV DB_MOUNT_DIR="/var/lib/postgresql/data"
ENV RUN_SINGLE_NODE="false"
ENV EXCLUDE_IRQ_CORES="false"
ENV ENABLE_SOCKET_BIND="false"
ENV SERVER_SOCKET_BIND_NODE=""
ENV SERVER_SOCKET_BIND_CORE_LIST=""
HEALTHCHECK --interval=5s --timeout=3s --retries=2 CMD pg_isready -h 127.0.0.1 -U postgres -p 5432 -q

ENTRYPOINT [ "/entrypoint.sh" ]
EXPOSE 5432
CMD ["postgres"]