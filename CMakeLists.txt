
cmake_minimum_required (VERSION 2.8...3.24)
cmake_policy(SET CMP0054 NEW)

Project(workloads NONE)
STRING(ASCII 27 esc)
set(red "${esc}[31m")
set(green "${esc}[32m")
set(strikethrough "${esc}[9m")
set(reset "${esc}[0m")

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/script/")
include(prerequisite)

add_custom_target(bom)
enable_testing()

set(PLATFORM_CONV_FROM "")
include(platform OPTIONAL)

if(EXISTS "${CMAKE_SOURCE_DIR}/workload/platforms")
  set(platforms "${CMAKE_SOURCE_DIR}/workload/platforms")
else()
  set(platforms "${CMAKE_SOURCE_DIR}/platforms")
endif()

if(NOT DEFINED PLATFORM)
    execute_process(COMMAND bash -c "head -n 1 '${platforms}'" OUTPUT_VARIABLE PLATFORM OUTPUT_STRIP_TRAILING_WHITESPACE)
else()
    execute_process(COMMAND bash -c "grep -E '^${PLATFORM}$' '${platforms}' | head -n 1" OUTPUT_VARIABLE platform OUTPUT_STRIP_TRAILING_WHITESPACE)
    if(NOT platform)
        message(FATAL_ERROR "Platform ${PLATFORM} not recognized!")
    endif()
    set(PLATFORM "${platform}")
endif()

include(registry OPTIONAL)
execute_process(COMMAND bash -c "GIT_SSH_COMMAND='ssh -o BatchMode=yes' GIT_ASKPASS=echo git fetch --tags > /dev/null;GIT_ASKPASS=echo git tag | sort -V" TIMEOUT 10 OUTPUT_VARIABLE tmp RESULT_VARIABLE status OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
if (RELEASE MATCHES "^:?v?[0-9]+[.][0-9]+[.]*[0-9]*$")
    string(REPLACE ":" "" release1 "${RELEASE}")
    if ((status EQUAL 0) AND (tmp MATCHES "${release1}"))
        if((NOT DEFINED REGISTRY) OR (NOT REGISTRY))
            set(REGISTRY "${DEFAULT_REGISTRY}")
        endif()
    endif()
endif()

string(REGEX REPLACE ".*\n" "" tmp "${tmp}")
string(REGEX REPLACE "(v?[0-9]*[.][0-9]*)[.].*" "\\1" mtmp "${tmp}")
if (tmp AND (status EQUAL 0))
    if ((NOT RELEASE STREQUAL ":${tmp}") AND (NOT RELEASE STREQUAL "${tmp}"))
        message("")
        message("*************************************************************")
        message("")
        if (tmp STREQUAL mtmp)
            message("${green}INFO:${reset} Detected major release ${mtmp}.")
        else()
            message("${green}INFO:${reset} Detected major release ${mtmp} and minor releases up to ${tmp}.")
            message("${green}INFO:${reset} Minor releases do not cover all workloads. See workload README.")
        endif()
        message("${green}INFO:${reset} Switch to the latest release as follows:")
        string(REPLACE "v" "" btmp "${tmp}")
        execute_process(COMMAND bash -c "GIT_SSH_COMMAND='ssh -o BatchMode=yes' GIT_ASKPASS=echo git branch --no-color -a --contains tags/${tmp} | grep -E 'remotes/.*/${btmp}$' | tail -n1 | tr -d ' '" TIMEOUT 5 OUTPUT_VARIABLE branch_id OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
        if(branch_id MATCHES "remotes")
            string(REPLACE "remotes/" "" branch_id "${branch_id}")
        else()
            set(branch_id "tags/${tmp}")
        endif()
        message("${green}INFO:${reset} git checkout tags/${tmp} # ${branch_id} with hotfix" )
        message("${green}INFO:${reset} cmake -DRELEASE=${tmp} ..")
        message("")
        message("*************************************************************")
        message("")
    endif()
else()
    message("")
    message("****************************************************************************")
    message("")
    message("${red}WARNING:${reset} Failed to detect any official release.")
    message("  Switch to any release as follows:")
    message("")
    message("git checkout <VERSION>")
    message("cmake -DREGISTRY=${DEFAULT_REGISTRY} -DRELEASE=v<VERSION> ..")
    message("")
    message("****************************************************************************")
endif()

if (NOT ${REGISTRY} MATCHES "/$")
    set(REGISTRY "${REGISTRY}/")
endif()

if (REGISTRY STREQUAL "${DEFAULT_REGISTRY}/")
    execute_process(COMMAND bash -c "grep -q -F $(echo ${REGISTRY} | cut -f1 -d/) ~/.docker/config.json" RESULT_VARIABLE disable_build OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
    if(disable_build)
        set(BUILDSH_OPTIONS "${BUILDSH_OPTIONS} --read-only-registry")
    endif()
endif()

if ((REGISTRY MATCHES ".*localhost.*") OR (REGISTRY MATCHES ".*127[.]0[.]0[.]1.*"))
    message(FATAL_ERROR "The REGISTRY host in ${REGISTRY} must be fully qualified.")
endif()

if ((NOT DEFINED TIMEOUT) OR (TIMEOUT STREQUAL ""))
    set(TIMEOUT "28800,600")
endif()

if ((NOT DEFINED RELEASE) OR (RELEASE STREQUAL ""))
    set(RELEASE ":latest")
elseif (NOT ${RELEASE} MATCHES "^:")
    set(RELEASE ":${RELEASE}")
endif()
string(TOLOWER "${RELEASE}" RELEASE)

if ((NOT DEFINED BENCHMARK) AND (EXISTS "${CMAKE_SOURCE_DIR}/workload/dummy"))
    set(BENCHMARK "workload/dummy/")
    message("${green}INFO:${reset} Default to the dummy workload for quick evaluation.")
    message("  Enable specific workload with cmake -DBENCHMARK=<name> .. or")
    message("  Enable all workloads with cmake -DBENCHMARK= ..")
    message("")
endif()

if (NOT DEFINED BACKEND)
    if(EXISTS "${PROJECT_SOURCE_DIR}/script/terraform.cmake")
        set(BACKEND "terraform")
    endif()
endif()

if(BACKEND)
    include(${BACKEND} OPTIONAL)
endif()
set(IMAGEARCH "linux/amd64")
set(IMAGESUFFIX "")
include(multi-arch OPTIONAL)

foreach(subdir image stack workload dist)
    if(EXISTS "${PROJECT_SOURCE_DIR}/${subdir}/CMakeLists.txt")
        add_subdirectory(${subdir})
    endif()
endforeach()

message("")
message("-- Setting: PLATFORM=${PLATFORM}${PLATFORM_CONV_FROM}, ARCH=${IMAGEARCH}")
if(NOT DEFINED REGISTRY_AUTH)
    message("-- Setting: REGISTRY=${REGISTRY}")
else()
    message("-- Setting: REGISTRY=${REGISTRY}, AUTH=${REGISTRY_AUTH}")
endif()
message("-- Setting: RELEASE=${RELEASE}")
if(BACKEND)
    message("-- Setting: TIMEOUT=${TIMEOUT}")
endif()
if(ACCEPT_LICENSE)
    message("-- Setting: ACCEPT_LICENSE=${ACCEPT_LICENSE}")
endif()
if(NOT (BUILDSH_OPTIONS MATCHES "^( --read-only-registry|)$"))
    message("-- Setting: BUILDSH_OPTIONS=${BUILDSH_OPTIONS}")
endif()
if(BACKEND)
    message("-- Setting: BENCHMARK=${BENCHMARK}")
    message("-- Setting: BACKEND=${BACKEND}")
endif()
if(COMMAND show_backend_settings)
    show_backend_settings()
endif()

message("")
if(BUILDSH_OPTIONS MATCHES "--read-only-registry")
    message("${green}INFO:${reset} Build is disabled as ${DEFAULT_REGISTRY} is a readonly docker registry")
endif()

if(COMMAND detect_backend_warnings)
    detect_backend_warnings()
endif()

if (RELEASE MATCHES "^:v[0-9]+[.][0-9]+[.]*[0-9]*$")
    string(REPLACE ":" "" release1 "${RELEASE}")
    if((NOT REGISTRY STREQUAL "${DEFAULT_REGISTRY}") AND (NOT REGISTRY STREQUAL "${DEFAULT_REGISTRY}/") AND DEFAULT_REGISTRY)
        message("${red}WARNING:${reset} Issue 'cmake -DREGISTRY=${DEFAULT_REGISTRY} ..' to use official ${release1} images")
    endif()
    execute_process(COMMAND bash -c "GIT_SSH_COMMAND='ssh -o BatchMode=yes' GIT_ASKPASS=echo git rev-parse HEAD" TIMEOUT 5 OUTPUT_VARIABLE head_commit_id OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
    string(REPLACE "v" "" release2 "${release1}")
    execute_process(COMMAND bash -c "GIT_SSH_COMMAND='ssh -o BatchMode=yes' GIT_ASKPASS=echo git branch --no-color -a --contains tags/${release1} | grep -E 'remotes/.*/${release2}$' | tail -n1 | tr -d ' '" TIMEOUT 5 OUTPUT_VARIABLE branch_id OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
    if(branch_id MATCHES "remotes")
        execute_process(COMMAND bash -c "GIT_SSH_COMMAND='ssh -o BatchMode=yes' GIT_ASKPASS=echo git show-ref -s refs/${branch_id} | tail -n1" TIMEOUT 5 OUTPUT_VARIABLE release_commit_id OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
        string(REPLACE "remotes/" "" branch_id "${branch_id}")
    else()
        execute_process(COMMAND bash -c "GIT_SSH_COMMAND='ssh -o BatchMode=yes' GIT_ASKPASS=echo git show-ref -s refs/tags/${release1} | tail -n1" TIMEOUT 5 OUTPUT_VARIABLE release_commit_id OUTPUT_STRIP_TRAILING_WHITESPACE ERROR_QUIET)
        set(branch_id "tags/${release1}")
    endif()
    if (NOT release_commit_id STREQUAL "${head_commit_id}")
        if (branch_id STREQUAL "tags/${release1}")
            message("${red}WARNING:${reset} Issue 'git checkout tags/${release1}' to match codebase with release ${release1}")
        else()
            message("${red}WARNING:${reset} Issue 'git checkout tags/${release1}' (or 'git checkout ${branch_id}' with hotfix) to match codebase with release ${release1}")
        endif()
    endif()
endif()

if(EXISTS "${PROJECT_SOURCE_DIR}/script/benchmark")
    execute_process(COMMAND bash -c "ln -s -r -f '${PROJECT_SOURCE_DIR}'/script/benchmark/*.sh ." WORKING_DIRECTORY "${CMAKE_BINARY_DIR}")
endif()

message("")
include(legalnotice OPTIONAL)
set_property(DIRECTORY APPEND PROPERTY ADDITIONAL_MAKE_CLEAN_FILES "${CMAKE_BINARY_DIR}/.log_files")

